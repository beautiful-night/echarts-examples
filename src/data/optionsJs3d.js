export default {"animating-contour-on-globe":"/*\ntitle: Animating Contour on Globe\ncategory: globe\ntitleCN: Animating Contour on Globe\nvideoStart: 2000\nvideoEnd: 6000\n*/\nvar config = {\n  color: '#c0101a',\n  levels: 1,\n  intensity: 4,\n  threshold: 0.01\n};\nvar canvas = document.createElement('canvas');\ncanvas.width = 4096;\ncanvas.height = 2048;\ncontext = canvas.getContext('2d');\ncontext.lineWidth = 0.5;\ncontext.strokeStyle = config.color;\ncontext.fillStyle = config.color;\ncontext.shadowColor = config.color;\n$.when(\n  $.getScript(\n    'https://jsd.cdn.zzko.cn/npm/d3-array@2.8.0/dist/d3-array.js'\n  ),\n  $.getScript(\n    'https://jsd.cdn.zzko.cn/npm/d3-contour@2.0.0/dist/d3-contour.js'\n  ),\n  $.getScript('https://jsd.cdn.zzko.cn/npm/d3-geo@2.0.1/dist/d3-geo.js'),\n  $.getScript('https://jsd.cdn.zzko.cn/npm/d3-timer@2.0.0/dist/d3-timer.js')\n).done(function () {\n  image(ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg').then(\n    function (image) {\n      var m = image.height,\n        n = image.width,\n        values = new Array(n * m),\n        contours = d3.contours().size([n, m]).smooth(true),\n        projection = d3.geoIdentity().scale(canvas.width / n),\n        path = d3.geoPath(projection, context);\n      //   StackBlur.R(image, 5);\n      for (var j = 0, k = 0; j < m; ++j) {\n        for (var i = 0; i < n; ++i, ++k) {\n          values[k] = image.data[k << 2] / 255;\n        }\n      }\n      var opt = {\n        image: canvas\n      };\n      var results = [];\n      function update(threshold, levels) {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var thresholds = [];\n        for (var i = 0; i < levels; i++) {\n          thresholds.push((threshold + (1 / levels) * i) % 1);\n        }\n        results = contours.thresholds(thresholds)(values);\n        redraw();\n      }\n      function redraw() {\n        results.forEach(function (d, idx) {\n          context.beginPath();\n          path(d);\n          context.globalAlpha = 1;\n          context.stroke();\n          if (idx > (config.levels / 5) * 3) {\n            context.globalAlpha = 0.01;\n            context.fill();\n          }\n        });\n        opt.onupdate();\n      }\n      d3.timer(function (t) {\n        var threshold = (t % 10000) / 10000;\n        update(threshold, 1);\n      });\n      initCharts(opt);\n      update(config.threshold, config.levels);\n    }\n  );\n  function image(url) {\n    return new Promise(function (resolve) {\n      var image = new Image();\n      image.src = url;\n      image.crossOrigin = 'Anonymous';\n      image.onload = function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width / 8;\n        canvas.height = image.height / 8;\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n      };\n    });\n  }\n  function initCharts(opt) {\n    var contourChart = echarts.init(document.createElement('canvas'), null, {\n      width: 4096,\n      height: 2048\n    });\n    var img = new echarts.graphic.Image({\n      style: {\n        image: opt.image,\n        x: -1,\n        y: -1,\n        width: opt.image.width + 2,\n        height: opt.image.height + 2\n      }\n    });\n    contourChart.getZr().add(img);\n    opt.onupdate = function () {\n      img.dirty();\n    };\n    myChart.setOption({\n      backgroundColor: '#000',\n      globe: {\n        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n        heightTexture:\n          ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n        displacementScale: 0.05,\n        displacementQuality: 'high',\n        baseColor: '#000',\n        shading: 'realistic',\n        realisticMaterial: {\n          roughness: 0.2,\n          metalness: 0\n        },\n        postEffect: {\n          enable: true,\n          depthOfField: {\n            // enable: true\n          }\n        },\n        light: {\n          ambient: {\n            intensity: 0\n          },\n          main: {\n            intensity: 0.1,\n            shadow: false\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n            exposure: 1,\n            diffuseIntensity: 0.5,\n            specularIntensity: 2\n          }\n        },\n        viewControl: {\n          autoRotate: false\n        },\n        layers: [\n          {\n            type: 'blend',\n            blendTo: 'emission',\n            texture: contourChart,\n            intensity: config.intensity\n          }\n        ]\n      }\n    });\n  }\n});\n","global-wind-visualization":"/*\ntitle: Global wind visualization\ncategory: flowGL\ntags: bmap\ntitleCN: Global wind visualization\nvideoStart: 2000\nvideoEnd: 10000\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/winds.json', function (windData) {\n  var data = [];\n  var p = 0;\n  var maxMag = 0;\n  var minMag = Infinity;\n  for (var j = 0; j < windData.ny; j++) {\n    for (var i = 0; i <= windData.nx; i++) {\n      // Continuous data.\n      var p = (i % windData.nx) + j * windData.nx;\n      var vx = windData.data[p][0];\n      var vy = windData.data[p][1];\n      var mag = Math.sqrt(vx * vx + vy * vy);\n      // 数据是一个一维数组\n      // [ [经度, 维度，向量经度方向的值，向量维度方向的值] ]\n      data.push([\n        (i / windData.nx) * 360 - 180,\n        (j / windData.ny) * 180 - 90,\n        vx,\n        vy,\n        mag\n      ]);\n      maxMag = Math.max(mag, maxMag);\n      minMag = Math.min(mag, minMag);\n    }\n  }\n  myChart.setOption(\n    (option = {\n      backgroundColor: '#001122',\n      visualMap: {\n        left: 'right',\n        min: minMag,\n        max: maxMag,\n        dimension: 4,\n        inRange: {\n          // color: ['green', 'yellow', 'red']\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ]\n        },\n        realtime: false,\n        calculable: true,\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      bmap: {\n        center: [0, 0],\n        zoom: 1,\n        roam: true,\n        mapStyle: {\n          styleJson: [\n            {\n              featureType: 'water',\n              elementType: 'all',\n              stylers: {\n                color: '#031628'\n              }\n            },\n            {\n              featureType: 'land',\n              elementType: 'geometry',\n              stylers: {\n                color: '#000102'\n              }\n            },\n            {\n              featureType: 'highway',\n              elementType: 'all',\n              stylers: {\n                visibility: 'off'\n              }\n            },\n            {\n              featureType: 'arterial',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'arterial',\n              elementType: 'geometry.stroke',\n              stylers: {\n                color: '#0b3d51'\n              }\n            },\n            {\n              featureType: 'local',\n              elementType: 'geometry',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'railway',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'railway',\n              elementType: 'geometry.stroke',\n              stylers: {\n                color: '#08304b'\n              }\n            },\n            {\n              featureType: 'subway',\n              elementType: 'geometry',\n              stylers: {\n                lightness: -70\n              }\n            },\n            {\n              featureType: 'building',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'all',\n              elementType: 'labels.text.fill',\n              stylers: {\n                color: '#857f7f'\n              }\n            },\n            {\n              featureType: 'all',\n              elementType: 'labels.text.stroke',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'building',\n              elementType: 'geometry',\n              stylers: {\n                color: '#022338'\n              }\n            },\n            {\n              featureType: 'green',\n              elementType: 'geometry',\n              stylers: {\n                color: '#062032'\n              }\n            },\n            {\n              featureType: 'boundary',\n              elementType: 'all',\n              stylers: {\n                color: '#465b6c'\n              }\n            },\n            {\n              featureType: 'manmade',\n              elementType: 'all',\n              stylers: {\n                color: '#022338'\n              }\n            },\n            {\n              featureType: 'label',\n              elementType: 'all',\n              stylers: {\n                visibility: 'off'\n              }\n            }\n          ]\n        }\n      },\n      series: [\n        {\n          type: 'flowGL',\n          coordinateSystem: 'bmap',\n          data: data,\n          supersampling: 4,\n          particleType: 'line',\n          particleDensity: 128,\n          particleSpeed: 1,\n          // gridWidth: windData.nx,\n          // gridHeight: windData.ny,\n          itemStyle: {\n            opacity: 0.7\n          }\n        }\n      ]\n    })\n  );\n});\n","graphgl-large-internet":"/*\ntitle: GraphGL - Large Internet\ncategory: graphGL\ntheme: dark\ntitleCN: GraphGL - Large Internet\nshotDelay: 10000\nshotWidth: 1920\n*/\n$.getJSON(\n  ROOT_PATH + '/data-gl/asset/data/internet.graph.json',\n  function (graph) {\n    var edges = graph.edges.map(function (edge) {\n      return {\n        source: edge[0],\n        target: edge[1],\n        value: 2\n      };\n    });\n    var categories = [];\n    var categoriesMap = {};\n    var nodes = graph.nodes.map(function (node) {\n      if (!categoriesMap[node[3]]) {\n        categories.push({\n          name: node[3]\n        });\n        categoriesMap[node[3]] = true;\n      }\n      return {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        // x: node[0],\n        // y: node[1],\n        symbolSize: node[2],\n        category: node[3],\n        value: 1\n      };\n    });\n    myChart.setOption({\n      color: [\n        'rgb(203,239,15)',\n        'rgb(73,15,239)',\n        'rgb(239,231,15)',\n        'rgb(15,217,239)',\n        'rgb(30,15,239)',\n        'rgb(15,174,239)',\n        'rgb(116,239,15)',\n        'rgb(239,15,58)',\n        'rgb(15,239,174)',\n        'rgb(239,102,15)',\n        'rgb(239,15,15)',\n        'rgb(15,44,239)',\n        'rgb(239,145,15)',\n        'rgb(30,239,15)',\n        'rgb(239,188,15)',\n        'rgb(159,239,15)',\n        'rgb(159,15,239)',\n        'rgb(15,239,44)',\n        'rgb(15,239,87)',\n        'rgb(15,239,217)',\n        'rgb(203,15,239)',\n        'rgb(239,15,188)',\n        'rgb(239,15,102)',\n        'rgb(239,58,15)',\n        'rgb(239,15,145)',\n        'rgb(116,15,239)',\n        'rgb(15,131,239)',\n        'rgb(73,239,15)',\n        'rgb(15,239,131)',\n        'rgb(15,87,239)',\n        'rgb(239,15,231)'\n      ],\n      series: [\n        {\n          type: 'graphGL',\n          nodes: nodes,\n          edges: edges,\n          categories: categories.sort(function (a, b) {\n            return a.name - b.name;\n          }),\n          lineStyle: {\n            color: 'rgba(255,255,255,0.2)'\n          },\n          itemStyle: {\n            opacity: 1\n          },\n          forceAtlas2: {\n            steps: 1,\n            stopThreshold: 1,\n            jitterTolerence: 10,\n            edgeWeight: [0.2, 1],\n            gravity: 0,\n            edgeWeightInfluence: 1,\n            scaling: 0.2\n          }\n        }\n      ]\n    });\n  }\n);\n","globe-country-carousel":"/*\ntitle: Country Carousel\ncategory: globe\ntitleCN: Country Carousel\n*/\nvar canvas = document.createElement('canvas');\nvar mapChart = echarts.init(canvas, null, {\n  width: 2048,\n  height: 1024\n});\nmapChart.setOption({\n  backgroundColor: '#999',\n  geo: {\n    type: 'map',\n    map: 'world',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    boundingCoords: [\n      [-180, 90],\n      [180, -90]\n    ],\n    silent: true,\n    itemStyle: {\n      borderColor: '#000'\n    },\n    label: {\n      color: '#fff',\n      fontSize: 40\n    }\n  }\n});\noption = {\n  globe: {\n    baseTexture: mapChart,\n    heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    displacementScale: 0.1,\n    shading: 'realistic',\n    realisticMaterial: {\n      roughness: 0.8,\n      metalness: 0\n    },\n    postEffect: {\n      enable: true\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      ambient: {\n        intensity: 0\n      },\n      main: {\n        intensity: 2,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n        exposure: 1,\n        diffuseIntensity: 0.2\n      }\n    },\n    viewControl: {\n      animationDurationUpdate: 1000,\n      animationEasingUpdate: 'cubicInOut',\n      targetCoord: [116.46, 39.92],\n      autoRotate: false\n    }\n  },\n  series: []\n};\nvar regions = mapChart.getModel().getComponent('geo').coordinateSystem.regions;\nsetInterval(function () {\n  var region = regions[Math.round(Math.random() * (regions.length - 1))];\n  myChart.setOption({\n    title: {\n      left: 'center',\n      top: 'center',\n      text: region.name,\n      textStyle: {\n        fontSize: 40\n      }\n    },\n    globe: {\n      viewControl: {\n        targetCoord: region.center\n      }\n    }\n  });\n  mapChart.setOption({\n    geo: {\n      regions: [\n        {\n          name: region.name,\n          itemStyle: {\n            normal: {\n              areaColor: '#444'\n            }\n          }\n        }\n      ]\n    }\n  });\n}, 2000);\n","bar3d-dataset":"/*\ntitle: 3D Bar with Dataset\ncategory: bar3D\ntitleCN: 使用 dataset 为三维柱状图设置数据\n*/\n$.get(\n  ROOT_PATH + '/data/asset/data/life-expectancy-table.json',\n  function (data) {\n    option = {\n      grid3D: {},\n      tooltip: {},\n      xAxis3D: {\n        type: 'category'\n      },\n      yAxis3D: {\n        type: 'category'\n      },\n      zAxis3D: {},\n      visualMap: {\n        max: 1e8,\n        dimension: 'Population'\n      },\n      dataset: {\n        dimensions: [\n          'Income',\n          'Life Expectancy',\n          'Population',\n          'Country',\n          { name: 'Year', type: 'ordinal' }\n        ],\n        source: data\n      },\n      series: [\n        {\n          type: 'bar3D',\n          // symbolSize: symbolSize,\n          shading: 'lambert',\n          encode: {\n            x: 'Year',\n            y: 'Country',\n            z: 'Life Expectancy',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }\n      ]\n    };\n    myChart.setOption(option);\n  }\n);\n","globe-with-echarts-surface":"/*\ntitle: Globe with ECharts Surface\ncategory: globe\ntitleCN: Globe with ECharts Surface\n*/\nvar canvas = document.createElement('canvas');\nvar mapChart = echarts.init(canvas, null, {\n  width: 4096,\n  height: 2048\n});\nmapChart.setOption({\n  backgroundColor: '#fff',\n  visualMap: {\n    show: false,\n    min: 0,\n    max: 500000,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  series: [\n    {\n      type: 'map',\n      map: 'world',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      boundingCoords: [\n        [-180, 90],\n        [180, -90]\n      ],\n      data: [\n        { name: 'Afghanistan', value: 28397.812 },\n        { name: 'Angola', value: 19549.124 },\n        { name: 'Albania', value: 3150.143 },\n        { name: 'United Arab Emirates', value: 8441.537 },\n        { name: 'Argentina', value: 40374.224 },\n        { name: 'Armenia', value: 2963.496 },\n        { name: 'French Southern and Antarctic Lands', value: 268.065 },\n        { name: 'Australia', value: 22404.488 },\n        { name: 'Austria', value: 8401.924 },\n        { name: 'Azerbaijan', value: 9094.718 },\n        { name: 'Burundi', value: 9232.753 },\n        { name: 'Belgium', value: 10941.288 },\n        { name: 'Benin', value: 9509.798 },\n        { name: 'Burkina Faso', value: 15540.284 },\n        { name: 'Bangladesh', value: 151125.475 },\n        { name: 'Bulgaria', value: 7389.175 },\n        { name: 'The Bahamas', value: 66402.316 },\n        { name: 'Bosnia and Herzegovina', value: 3845.929 },\n        { name: 'Belarus', value: 9491.07 },\n        { name: 'Belize', value: 308.595 },\n        { name: 'Bermuda', value: 64.951 },\n        { name: 'Bolivia', value: 716.939 },\n        { name: 'Brazil', value: 195210.154 },\n        { name: 'Brunei', value: 27.223 },\n        { name: 'Bhutan', value: 716.939 },\n        { name: 'Botswana', value: 1969.341 },\n        { name: 'Central African Republic', value: 4349.921 },\n        { name: 'Canada', value: 34126.24 },\n        { name: 'Switzerland', value: 7830.534 },\n        { name: 'Chile', value: 17150.76 },\n        { name: 'China', value: 1359821.465 },\n        { name: 'Ivory Coast', value: 60508.978 },\n        { name: 'Cameroon', value: 20624.343 },\n        { name: 'Democratic Republic of the Congo', value: 62191.161 },\n        { name: 'Republic of the Congo', value: 3573.024 },\n        { name: 'Colombia', value: 46444.798 },\n        { name: 'Costa Rica', value: 4669.685 },\n        { name: 'Cuba', value: 11281.768 },\n        { name: 'Northern Cyprus', value: 1.468 },\n        { name: 'Cyprus', value: 1103.685 },\n        { name: 'Czech Republic', value: 10553.701 },\n        { name: 'Germany', value: 83017.404 },\n        { name: 'Djibouti', value: 834.036 },\n        { name: 'Denmark', value: 5550.959 },\n        { name: 'Dominican Republic', value: 10016.797 },\n        { name: 'Algeria', value: 37062.82 },\n        { name: 'Ecuador', value: 15001.072 },\n        { name: 'Egypt', value: 78075.705 },\n        { name: 'Eritrea', value: 5741.159 },\n        { name: 'Spain', value: 46182.038 },\n        { name: 'Estonia', value: 1298.533 },\n        { name: 'Ethiopia', value: 87095.281 },\n        { name: 'Finland', value: 5367.693 },\n        { name: 'Fiji', value: 860.559 },\n        { name: 'Falkland Islands', value: 49.581 },\n        { name: 'France', value: 63230.866 },\n        { name: 'Gabon', value: 1556.222 },\n        { name: 'United Kingdom', value: 62066.35 },\n        { name: 'Georgia', value: 4388.674 },\n        { name: 'Ghana', value: 24262.901 },\n        { name: 'Guinea', value: 10876.033 },\n        { name: 'Gambia', value: 1680.64 },\n        { name: 'Guinea Bissau', value: 10876.033 },\n        { name: 'Equatorial Guinea', value: 696.167 },\n        { name: 'Greece', value: 11109.999 },\n        { name: 'Greenland', value: 56.546 },\n        { name: 'Guatemala', value: 14341.576 },\n        { name: 'French Guiana', value: 231.169 },\n        { name: 'Guyana', value: 786.126 },\n        { name: 'Honduras', value: 7621.204 },\n        { name: 'Croatia', value: 4338.027 },\n        { name: 'Haiti', value: 9896.4 },\n        { name: 'Hungary', value: 10014.633 },\n        { name: 'Indonesia', value: 240676.485 },\n        { name: 'India', value: 1205624.648 },\n        { name: 'Ireland', value: 4467.561 },\n        { name: 'Iran', value: 240676.485 },\n        { name: 'Iraq', value: 30962.38 },\n        { name: 'Iceland', value: 318.042 },\n        { name: 'Israel', value: 7420.368 },\n        { name: 'Italy', value: 60508.978 },\n        { name: 'Jamaica', value: 2741.485 },\n        { name: 'Jordan', value: 6454.554 },\n        { name: 'Japan', value: 127352.833 },\n        { name: 'Kazakhstan', value: 15921.127 },\n        { name: 'Kenya', value: 40909.194 },\n        { name: 'Kyrgyzstan', value: 5334.223 },\n        { name: 'Cambodia', value: 14364.931 },\n        { name: 'South Korea', value: 51452.352 },\n        { name: 'Kosovo', value: 97.743 },\n        { name: 'Kuwait', value: 2991.58 },\n        { name: 'Laos', value: 6395.713 },\n        { name: 'Lebanon', value: 4341.092 },\n        { name: 'Liberia', value: 3957.99 },\n        { name: 'Libya', value: 6040.612 },\n        { name: 'Sri Lanka', value: 20758.779 },\n        { name: 'Lesotho', value: 2008.921 },\n        { name: 'Lithuania', value: 3068.457 },\n        { name: 'Luxembourg', value: 507.885 },\n        { name: 'Latvia', value: 2090.519 },\n        { name: 'Morocco', value: 31642.36 },\n        { name: 'Moldova', value: 103.619 },\n        { name: 'Madagascar', value: 21079.532 },\n        { name: 'Mexico', value: 117886.404 },\n        { name: 'Macedonia', value: 507.885 },\n        { name: 'Mali', value: 13985.961 },\n        { name: 'Myanmar', value: 51931.231 },\n        { name: 'Montenegro', value: 620.078 },\n        { name: 'Mongolia', value: 2712.738 },\n        { name: 'Mozambique', value: 23967.265 },\n        { name: 'Mauritania', value: 3609.42 },\n        { name: 'Malawi', value: 15013.694 },\n        { name: 'Malaysia', value: 28275.835 },\n        { name: 'Namibia', value: 2178.967 },\n        { name: 'New Caledonia', value: 246.379 },\n        { name: 'Niger', value: 15893.746 },\n        { name: 'Nigeria', value: 159707.78 },\n        { name: 'Nicaragua', value: 5822.209 },\n        { name: 'Netherlands', value: 16615.243 },\n        { name: 'Norway', value: 4891.251 },\n        { name: 'Nepal', value: 26846.016 },\n        { name: 'New Zealand', value: 4368.136 },\n        { name: 'Oman', value: 2802.768 },\n        { name: 'Pakistan', value: 173149.306 },\n        { name: 'Panama', value: 3678.128 },\n        { name: 'Peru', value: 29262.83 },\n        { name: 'Philippines', value: 93444.322 },\n        { name: 'Papua New Guinea', value: 6858.945 },\n        { name: 'Poland', value: 38198.754 },\n        { name: 'Puerto Rico', value: 3709.671 },\n        { name: 'North Korea', value: 1.468 },\n        { name: 'Portugal', value: 10589.792 },\n        { name: 'Paraguay', value: 6459.721 },\n        { name: 'Qatar', value: 1749.713 },\n        { name: 'Romania', value: 21861.476 },\n        { name: 'Russia', value: 21861.476 },\n        { name: 'Rwanda', value: 10836.732 },\n        { name: 'Western Sahara', value: 514.648 },\n        { name: 'Saudi Arabia', value: 27258.387 },\n        { name: 'Sudan', value: 35652.002 },\n        { name: 'South Sudan', value: 9940.929 },\n        { name: 'Senegal', value: 12950.564 },\n        { name: 'Solomon Islands', value: 526.447 },\n        { name: 'Sierra Leone', value: 5751.976 },\n        { name: 'El Salvador', value: 6218.195 },\n        { name: 'Somaliland', value: 9636.173 },\n        { name: 'Somalia', value: 9636.173 },\n        { name: 'Republic of Serbia', value: 3573.024 },\n        { name: 'Suriname', value: 524.96 },\n        { name: 'Slovakia', value: 5433.437 },\n        { name: 'Slovenia', value: 2054.232 },\n        { name: 'Sweden', value: 9382.297 },\n        { name: 'Swaziland', value: 1193.148 },\n        { name: 'Syria', value: 7830.534 },\n        { name: 'Chad', value: 11720.781 },\n        { name: 'Togo', value: 6306.014 },\n        { name: 'Thailand', value: 66402.316 },\n        { name: 'Tajikistan', value: 7627.326 },\n        { name: 'Turkmenistan', value: 5041.995 },\n        { name: 'East Timor', value: 10016.797 },\n        { name: 'Trinidad and Tobago', value: 1328.095 },\n        { name: 'Tunisia', value: 10631.83 },\n        { name: 'Turkey', value: 72137.546 },\n        { name: 'United Republic of Tanzania', value: 44973.33 },\n        { name: 'Uganda', value: 33987.213 },\n        { name: 'Ukraine', value: 46050.22 },\n        { name: 'Uruguay', value: 3371.982 },\n        { name: 'United States of America', value: 312247.116 },\n        { name: 'Uzbekistan', value: 27769.27 },\n        { name: 'Venezuela', value: 236.299 },\n        { name: 'Vietnam', value: 89047.397 },\n        { name: 'Vanuatu', value: 236.299 },\n        { name: 'West Bank', value: 13.565 },\n        { name: 'Yemen', value: 22763.008 },\n        { name: 'South Africa', value: 51452.352 },\n        { name: 'Zambia', value: 13216.985 },\n        { name: 'Zimbabwe', value: 13076.978 }\n      ]\n    }\n  ]\n});\n// http://visibleearth.nasa.gov/view_cat.php?categoryID=1484\noption = {\n  globe: {\n    baseTexture: mapChart,\n    heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    displacementScale: 0.1,\n    shading: 'lambert',\n    light: {\n      ambient: {\n        intensity: 0.5\n      },\n      main: {\n        intensity: 0.6\n      }\n    },\n    viewControl: {\n      autoRotate: false\n    }\n  },\n  series: []\n};\n","geo3d":"/*\ntitle: Geo3D\ncategory: geo3D\ntitleCN: Geo3D\n*/\noption = {\n  geo3D: {\n    map: 'world',\n    lambertMaterial: {\n      baseTexture: ROOT_PATH + '/data-gl/asset/woods.jpg',\n      textureTiling: 10\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 1\n      }\n    },\n    groundPlane: {\n      show: true\n    },\n    light: {\n      main: {\n        intensity: 1,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/canyon.hdr'\n      }\n    },\n    viewControl: {\n      distance: 50\n    },\n    itemStyle: {\n      borderColor: '#000',\n      borderWidth: 0.5\n    },\n    boxHeight: 1.0\n  }\n};\nmyChart.on('click', function () {\n  alert('click');\n});\n","global-wind-visualization-2":"/*\ntitle: Global Wind Visualization 2\ncategory: flowGL\ntags: bmap\ntitleCN: Global Wind Visualization 2\nvideoStart: 2000\nvideoEnd: 10000\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/gfs.json', function (windData) {\n  buildGrid(windData, function (header, grid) {\n    var data = [];\n    var p = 0;\n    var maxMag = 0;\n    var minMag = Infinity;\n    for (var j = 0; j < header.ny; j++) {\n      for (var i = 0; i < header.nx; i++) {\n        var vx = grid[j][i][0];\n        var vy = grid[j][i][1];\n        var mag = Math.sqrt(vx * vx + vy * vy);\n        var lng = (i / header.nx) * 360;\n        if (lng >= 180) {\n          lng = 180 - lng;\n        }\n        // 数据是一个一维数组\n        // [ [经度, 维度，向量经度方向的值，向量维度方向的值] ]\n        data.push([lng, 90 - (j / header.ny) * 180, vx, vy, mag]);\n        maxMag = Math.max(mag, maxMag);\n        minMag = Math.min(mag, minMag);\n      }\n    }\n    myChart.setOption({\n      backgroundColor: '#001122',\n      visualMap: {\n        left: 'right',\n        min: minMag,\n        max: maxMag,\n        dimension: 4,\n        inRange: {\n          // color: ['green', 'yellow', 'red']\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ]\n        },\n        realtime: false,\n        calculable: true,\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      bmap: {\n        center: [0, 0],\n        zoom: 1,\n        roam: true,\n        mapStyle: {\n          styleJson: [\n            {\n              featureType: 'water',\n              elementType: 'all',\n              stylers: {\n                color: '#031628'\n              }\n            },\n            {\n              featureType: 'land',\n              elementType: 'geometry',\n              stylers: {\n                color: '#000102'\n              }\n            },\n            {\n              featureType: 'highway',\n              elementType: 'all',\n              stylers: {\n                visibility: 'off'\n              }\n            },\n            {\n              featureType: 'arterial',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'arterial',\n              elementType: 'geometry.stroke',\n              stylers: {\n                color: '#0b3d51'\n              }\n            },\n            {\n              featureType: 'local',\n              elementType: 'geometry',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'railway',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'railway',\n              elementType: 'geometry.stroke',\n              stylers: {\n                color: '#08304b'\n              }\n            },\n            {\n              featureType: 'subway',\n              elementType: 'geometry',\n              stylers: {\n                lightness: -70\n              }\n            },\n            {\n              featureType: 'building',\n              elementType: 'geometry.fill',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'all',\n              elementType: 'labels.text.fill',\n              stylers: {\n                color: '#857f7f'\n              }\n            },\n            {\n              featureType: 'all',\n              elementType: 'labels.text.stroke',\n              stylers: {\n                color: '#000000'\n              }\n            },\n            {\n              featureType: 'building',\n              elementType: 'geometry',\n              stylers: {\n                color: '#022338'\n              }\n            },\n            {\n              featureType: 'green',\n              elementType: 'geometry',\n              stylers: {\n                color: '#062032'\n              }\n            },\n            {\n              featureType: 'boundary',\n              elementType: 'all',\n              stylers: {\n                color: '#465b6c'\n              }\n            },\n            {\n              featureType: 'manmade',\n              elementType: 'all',\n              stylers: {\n                color: '#022338'\n              }\n            },\n            {\n              featureType: 'label',\n              elementType: 'all',\n              stylers: {\n                visibility: 'off'\n              }\n            }\n          ]\n        }\n      },\n      series: [\n        {\n          type: 'flowGL',\n          coordinateSystem: 'bmap',\n          data: data,\n          supersampling: 4,\n          particleType: 'line',\n          particleDensity: 128,\n          particleSpeed: 1,\n          // gridWidth: windData.nx,\n          // gridHeight: windData.ny,\n          itemStyle: {\n            opacity: 0.7\n          }\n        }\n      ]\n    });\n  });\n});\n// https://github.com/Esri/wind-js/blob/master/windy.js#L41\nvar createWindBuilder = function (uComp, vComp) {\n  var uData = uComp.data,\n    vData = vComp.data;\n  return {\n    header: uComp.header,\n    //recipe: recipeFor(\"wind-\" + uComp.header.surface1Value),\n    data: function (i) {\n      return [uData[i], vData[i]];\n    }\n  };\n};\nvar createBuilder = function (data) {\n  var uComp = null,\n    vComp = null,\n    scalar = null;\n  data.forEach(function (record) {\n    switch (\n      record.header.parameterCategory +\n      ',' +\n      record.header.parameterNumber\n    ) {\n      case '2,2':\n        uComp = record;\n        break;\n      case '2,3':\n        vComp = record;\n        break;\n      default:\n        scalar = record;\n    }\n  });\n  return createWindBuilder(uComp, vComp);\n};\nvar buildGrid = function (data, callback) {\n  var builder = createBuilder(data);\n  var header = builder.header;\n  var λ0 = header.lo1,\n    φ0 = header.la1; // the grid's origin (e.g., 0.0E, 90.0N)\n  var Δλ = header.dx,\n    Δφ = header.dy; // distance between grid points (e.g., 2.5 deg lon, 2.5 deg lat)\n  var ni = header.nx,\n    nj = header.ny; // number of grid points W-E and N-S (e.g., 144 x 73)\n  var date = new Date(header.refTime);\n  date.setHours(date.getHours() + header.forecastTime);\n  // Scan mode 0 assumed. Longitude increases from λ0, and latitude decreases from φ0.\n  // http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_table3-4.shtml\n  var grid = [],\n    p = 0;\n  var isContinuous = Math.floor(ni * Δλ) >= 360;\n  for (var j = 0; j < nj; j++) {\n    var row = [];\n    for (var i = 0; i < ni; i++, p++) {\n      row[i] = builder.data(p);\n    }\n    if (isContinuous) {\n      // For wrapped grids, duplicate first column as last column to simplify interpolation logic\n      row.push(row[0]);\n    }\n    grid[j] = row;\n  }\n  callback(header, grid);\n};\n","geo3d-with-different-height":"/*\ntitle: Geo3D with Different Height\ncategory: geo3D\ntitleCN: Geo3D with Different Height\n*/\n$.getJSON(\n  ROOT_PATH + '/data-gl/asset/data/world-population.json',\n  function (populationData) {\n    var max = -Infinity;\n    var min = Infinity;\n    populationData.forEach(function (item) {\n      max = Math.max(Math.log(item.value), max);\n      min = Math.min(Math.log(item.value), min);\n    });\n    var regions = populationData.map(function (item) {\n      return {\n        name: item.name,\n        height: ((Math.log(item.value) - min) / (max - min)) * 3\n      };\n    });\n    myChart.setOption(\n      (option = {\n        backgroundColor: '#cdcfd5',\n        geo3D: {\n          map: 'world',\n          shading: 'lambert',\n          lambertMaterial: {\n            detailTexture: ROOT_PATH + '/data-gl/asset/woods.jpg',\n            textureTiling: 20\n          },\n          postEffect: {\n            enable: true,\n            SSAO: {\n              enable: true,\n              radius: 3,\n              quality: 'high'\n            }\n          },\n          groundPlane: {\n            show: true\n          },\n          light: {\n            main: {\n              intensity: 1,\n              shadow: true,\n              shadowQuality: 'high',\n              alpha: 30\n            },\n            ambient: {\n              intensity: 0\n            },\n            ambientCubemap: {\n              texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n              exposure: 2,\n              diffuseIntensity: 0.3\n            }\n          },\n          viewControl: {\n            distance: 50\n          },\n          regionHeight: 0.5,\n          regions: regions\n        }\n      })\n    );\n  }\n);\n","global-population-bar3d-on-globe":"/*\ntitle: Global Population - Bar3D on Globe\ncategory: bar3D\ntitleCN: Global Population - Bar3D on Globe\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/population.json', function (data) {\n  data = data\n    .filter(function (dataItem) {\n      return dataItem[2] > 0;\n    })\n    .map(function (dataItem) {\n      return [dataItem[0], dataItem[1], Math.sqrt(dataItem[2])];\n    });\n  option = {\n    backgroundColor: '#000',\n    globe: {\n      baseTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n      heightTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n      shading: 'lambert',\n      environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n      light: {\n        main: {\n          intensity: 2\n        }\n      },\n      viewControl: {\n        autoRotate: false\n      }\n    },\n    visualMap: {\n      max: 40,\n      calculable: true,\n      realtime: false,\n      inRange: {\n        colorLightness: [0.2, 0.9]\n      },\n      textStyle: {\n        color: '#fff'\n      },\n      controller: {\n        inRange: {\n          color: 'orange'\n        }\n      },\n      outOfRange: {\n        colorAlpha: 0\n      }\n    },\n    series: [\n      {\n        type: 'bar3D',\n        coordinateSystem: 'globe',\n        data: data,\n        barSize: 0.6,\n        minHeight: 0.2,\n        silent: true,\n        itemStyle: {\n          color: 'orange'\n        }\n      }\n    ]\n  };\n  myChart.setOption(option);\n});\n","bar3d-myth":"/*\ntitle: 星云\ncategory: bar3D\ntitleCN: 星云\n*/\nvar img = new Image();\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nimg.onload = function () {\n  var width = (canvas.width = img.width);\n  var height = (canvas.height = img.height);\n  ctx.drawImage(img, 0, 0, width, height);\n  var imgData = ctx.getImageData(0, 0, width, height);\n  var data = new Float32Array((imgData.data.length / 4) * 3);\n  var off = 0;\n  for (var i = 0; i < imgData.data.length / 4; i++) {\n    var r = imgData.data[i * 4];\n    var g = imgData.data[i * 4 + 1];\n    var b = imgData.data[i * 4 + 2];\n    var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n    lum = (lum - 125) / 4 + 50;\n    data[off++] = i % width;\n    data[off++] = height - Math.floor(i / width);\n    data[off++] = lum;\n  }\n  myChart.setOption(\n    (option = {\n      tooltip: {},\n      backgroundColor: '#fff',\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        min: 0,\n        max: 100\n      },\n      grid3D: {\n        show: false,\n        viewControl: {\n          alpha: 70,\n          beta: 0\n        },\n        postEffect: {\n          enable: true,\n          depthOfField: {\n            enable: true,\n            blurRadius: 4,\n            fstop: 10\n          }\n          // SSAO: {\n          //     enable: true\n          // }\n        },\n        boxDepth: 100,\n        boxHeight: 20,\n        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n        light: {\n          main: {\n            shadow: true,\n            intensity: 2\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n            exposure: 2,\n            diffuseIntensity: 0.2\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar3D',\n          shading: 'lambert',\n          barSize: 0.8,\n          silent: true,\n          dimensions: ['x', 'y', 'z'],\n          itemStyle: {\n            color: function (params) {\n              var i = params.dataIndex;\n              var r = imgData.data[i * 4] / 255;\n              var g = imgData.data[i * 4 + 1] / 255;\n              var b = imgData.data[i * 4 + 2] / 255;\n              var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n              r *= lum * 2;\n              g *= lum * 2;\n              b *= lum * 2;\n              return [r, g, b, 1];\n            }\n          },\n          data: data\n        }\n      ]\n    })\n  );\n};\nimg.src = ROOT_PATH + '/data-gl/asset/sample.jpg';\nimg.crossOrigin = 'Anonymous';\n","graphgl-gpu-layout":"/*\ntitle: GraphGL GPU Layout\ncategory: graphGL\ntheme: dark\ntitleCN: GraphGL GPU Layout\nvideoStart: 0\nvideoEnd: 10000\nshotWidth: 1280\n*/\nfunction createNodes(widthCount, heightCount) {\n  var nodes = [];\n  for (var i = 0; i < widthCount; i++) {\n    for (var j = 0; j < heightCount; j++) {\n      nodes.push({\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        value: 1\n      });\n    }\n  }\n  return nodes;\n}\nfunction createEdges(widthCount, heightCount) {\n  var edges = [];\n  for (var i = 0; i < widthCount; i++) {\n    for (var j = 0; j < heightCount; j++) {\n      if (i < widthCount - 1) {\n        edges.push({\n          source: i + j * widthCount,\n          target: i + 1 + j * widthCount,\n          value: 1\n        });\n      }\n      if (j < heightCount - 1) {\n        edges.push({\n          source: i + j * widthCount,\n          target: i + (j + 1) * widthCount,\n          value: 1\n        });\n      }\n    }\n  }\n  return edges;\n}\nvar nodes = createNodes(50, 50);\nvar edges = createEdges(50, 50);\noption = {\n  series: [\n    {\n      type: 'graphGL',\n      nodes: nodes,\n      edges: edges,\n      itemStyle: {\n        color: 'rgba(255,255,255,0.8)'\n      },\n      lineStyle: {\n        color: 'rgba(255,255,255,0.8)',\n        width: 3\n      },\n      forceAtlas2: {\n        steps: 5,\n        jitterTolerence: 10,\n        edgeWeightInfluence: 4\n      }\n    }\n  ]\n};\n","globe-moon":"/*\ntitle: Moon\ncategory: globe\ntitleCN: Moon\n*/\noption = {\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/moon-base.jpg',\n    heightTexture: ROOT_PATH + '/data-gl/asset/moon-bump.jpg',\n    displacementScale: 0.05,\n    displacementQuality: 'medium',\n    environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n    shading: 'realistic',\n    realisticMaterial: {\n      roughness: 0.8,\n      metalness: 0\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 2,\n        intensity: 1,\n        quality: 'high'\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      ambient: {\n        intensity: 0\n      },\n      main: {\n        intensity: 2,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 0,\n        diffuseIntensity: 0.02\n      }\n    },\n    viewControl: {\n      autoRotate: false\n    }\n  },\n  series: []\n};\n","globe-displacement":"/*\ntitle: Globe Displacement\ncategory: globe\ntitleCN: Globe Displacement\n*/\noption = {\n  globe: {\n    displacementTexture:\n      ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    displacementScale: 0.1,\n    displacementQuality: 'ultra',\n    shading: 'realistic',\n    realisticMaterial: {\n      roughness: 0.8,\n      metalness: 0\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 2,\n        intensity: 1.5,\n        quality: 'high'\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      ambient: {\n        intensity: 0\n      },\n      main: {\n        intensity: 1,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 1,\n        diffuseIntensity: 0.2\n      }\n    },\n    viewControl: {\n      autoRotate: false\n    },\n    debug: {\n      wireframe: {\n        show: true\n      }\n    }\n  },\n  series: []\n};\n","flowGL-noise":"/*\ntitle: Flow on the cartesian\ncategory: flowGL\ntitleCN: 直角坐标系上的向量场\ntheme: dark\nvideoStart: 2000\nvideoEnd: 10000\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var noise = new SimplexNoise(Math.random);\n  var noise2 = new SimplexNoise(Math.random);\n  function generateData() {\n    var data = [];\n    for (var i = 0; i <= 50; i++) {\n      for (var j = 0; j <= 50; j++) {\n        var dx = noise.noise2D(i / 30, j / 30);\n        var dy = noise2.noise2D(i / 30, j / 30);\n        var mag = Math.sqrt(dx * dx + dy * dy);\n        valMax = Math.max(valMax, mag);\n        valMin = Math.min(valMin, mag);\n        data.push([i, j, dx, dy, mag]);\n      }\n    }\n    return data;\n  }\n  var valMin = Infinity;\n  var valMax = -Infinity;\n  var data = generateData();\n  myChart.setOption({\n    visualMap: {\n      show: false,\n      min: valMin,\n      max: valMax,\n      dimension: 4,\n      inRange: {\n        color: [\n          '#313695',\n          '#4575b4',\n          '#74add1',\n          '#abd9e9',\n          '#e0f3f8',\n          '#ffffbf',\n          '#fee090',\n          '#fdae61',\n          '#f46d43',\n          '#d73027',\n          '#a50026'\n        ]\n      }\n    },\n    xAxis: {\n      type: 'value',\n      axisLine: {\n        lineStyle: {\n          color: '#fff'\n        }\n      },\n      splitLine: {\n        show: false,\n        lineStyle: {\n          color: 'rgba(255,255,255,0.2)'\n        }\n      }\n    },\n    yAxis: {\n      type: 'value',\n      axisLine: {\n        lineStyle: {\n          color: '#fff'\n        }\n      },\n      splitLine: {\n        show: false,\n        lineStyle: {\n          color: 'rgba(255,255,255,0.2)'\n        }\n      }\n    },\n    series: [\n      {\n        type: 'flowGL',\n        data: data,\n        particleDensity: 64,\n        particleSize: 5,\n        itemStyle: {\n          opacity: 0.5\n        }\n      },\n      {\n        type: 'custom',\n        data: data,\n        encode: {\n          x: 0,\n          y: 0\n        },\n        renderItem: function (params, api) {\n          var x = api.value(0),\n            y = api.value(1),\n            dx = api.value(2),\n            dy = api.value(3);\n          var start = api.coord([x - dx / 2, y - dy / 2]);\n          var end = api.coord([x + dx / 2, y + dy / 2]);\n          return {\n            type: 'line',\n            shape: {\n              x1: start[0],\n              y1: start[1],\n              x2: end[0],\n              y2: end[1]\n            },\n            style: {\n              lineWidth: 2,\n              stroke: '#fff',\n              opacity: 0.2\n            }\n          };\n        }\n      }\n    ]\n  });\n});\n","bar3d-punch-card":"/*\ntitle: Bar3D - Punch Card\ncategory: bar3D\ntitleCN: Bar3D - Punch Card\n*/\n// prettier-ignore\nvar hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n    '7a', '8a', '9a', '10a', '11a',\n    '12p', '1p', '2p', '3p', '4p', '5p',\n    '6p', '7p', '8p', '9p', '10p', '11p'];\n// prettier-ignore\nvar days = ['Saturday', 'Friday', 'Thursday',\n    'Wednesday', 'Tuesday', 'Monday', 'Sunday'];\n// prettier-ignore\nvar data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];\noption = {\n  tooltip: {},\n  visualMap: {\n    max: 20,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {\n    type: 'category',\n    data: hours\n  },\n  yAxis3D: {\n    type: 'category',\n    data: days\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    boxWidth: 200,\n    boxDepth: 80,\n    viewControl: {\n      // projection: 'orthographic'\n    },\n    light: {\n      main: {\n        intensity: 1.2,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0.3\n      }\n    }\n  },\n  series: [\n    {\n      type: 'bar3D',\n      data: data.map(function (item) {\n        return {\n          value: [item[1], item[0], item[2]]\n        };\n      }),\n      shading: 'lambert',\n      label: {\n        fontSize: 16,\n        borderWidth: 1\n      },\n      emphasis: {\n        label: {\n          fontSize: 20,\n          color: '#900'\n        },\n        itemStyle: {\n          color: '#900'\n        }\n      }\n    }\n  ]\n};\n","globe-contour-paint":"/*\ntitle: Contour Paint\ncategory: globe\ntitleCN: Contour Paint\n*/\nvar config = {\n  color: '#c0101a',\n  levels: 50,\n  intensity: 100,\n  threshold: 0.01\n};\nvar canvas = document.createElement('canvas');\ncanvas.width = 4096;\ncanvas.height = 2048;\ncontext = canvas.getContext('2d');\ncontext.lineWidth = 0.4;\ncontext.strokeStyle = config.color;\ncontext.fillStyle = config.color;\ncontext.shadowColor = config.color;\n$.when(\n  $.getScript(\n    'https://jsd.cdn.zzko.cn/npm/d3-array@2.8.0/dist/d3-array.js'\n  ),\n  $.getScript(\n    'https://jsd.cdn.zzko.cn/npm/d3-contour@2.0.0/dist/d3-contour.js'\n  ),\n  $.getScript('https://jsd.cdn.zzko.cn/npm/d3-geo@2.0.1/dist/d3-geo.js'),\n  $.getScript('https://jsd.cdn.zzko.cn/npm/d3-timer@2.0.0/dist/d3-timer.js')\n).done(function () {\n  image(ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg').then(\n    function (image) {\n      var m = image.height,\n        n = image.width,\n        values = new Array(n * m),\n        contours = d3.contours().size([n, m]).smooth(true),\n        projection = d3.geoIdentity().scale(canvas.width / n),\n        path = d3.geoPath(projection, context);\n      //   StackBlur.R(image, 5);\n      for (var j = 0, k = 0; j < m; ++j) {\n        for (var i = 0; i < n; ++i, ++k) {\n          values[k] = image.data[k << 2] / 255;\n        }\n      }\n      var opt = {\n        image: canvas\n      };\n      var results = [];\n      function update(threshold, levels) {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var thresholds = [];\n        for (var i = 0; i < levels; i++) {\n          thresholds.push((threshold + (1 / levels) * i) % 1);\n        }\n        results = contours.thresholds(thresholds)(values);\n        redraw();\n      }\n      function redraw() {\n        results.forEach(function (d, idx) {\n          context.beginPath();\n          path(d);\n          context.globalAlpha = 1;\n          context.stroke();\n          if (idx > (config.levels / 5) * 3) {\n            context.globalAlpha = 0.01;\n            context.fill();\n          }\n        });\n        onupdate();\n      }\n      update(config.threshold, config.levels);\n      initCharts(opt);\n    }\n  );\n  function image(url) {\n    return new Promise(function (resolve) {\n      var image = new Image();\n      image.src = url;\n      image.crossOrigin = 'Anonymous';\n      image.onload = function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width / 4;\n        canvas.height = image.height / 4;\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n      };\n    });\n  }\n  var contourChart = echarts.init(document.createElement('canvas'), null, {\n    width: 4096,\n    height: 2048\n  });\n  var img = new echarts.graphic.Image({\n    style: {\n      x: -1,\n      y: -1\n    }\n  });\n  onupdate = function () {\n    img.dirty();\n  };\n  function initCharts(opt) {\n    img.style.width = opt.image.width + 2;\n    img.style.height = opt.image.height + 2;\n    img.style.image = opt.image;\n    contourChart.getZr().add(img);\n    myChart.setOption({\n      backgroundColor: '#000',\n      globe: {\n        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n        heightTexture:\n          ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n        displacementScale: 0.05,\n        displacementQuality: 'high',\n        baseColor: '#111',\n        shading: 'realistic',\n        realisticMaterial: {\n          roughness: 0.2,\n          metalness: 0\n        },\n        postEffect: {\n          enable: true,\n          depthOfField: {\n            // enable: true\n          }\n        },\n        light: {\n          ambient: {\n            intensity: 0\n          },\n          main: {\n            intensity: 0.1,\n            shadow: false\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n            exposure: 1,\n            diffuseIntensity: 0.5,\n            specularIntensity: 2\n          }\n        },\n        viewControl: {\n          autoRotate: false\n        },\n        layers: [\n          {\n            type: 'blend',\n            blendTo: 'albedo',\n            texture: contourChart,\n            intensity: 50\n          }\n        ]\n      }\n    });\n  }\n});\n","globe-echarts-gl-hello-world":"/*\ntitle: ECharts-GL Hello World\ncategory: globe\ntitleCN: ECharts-GL Hello World\nscripts: 'https://jsd.cdn.zzko.cn/gh/ecomfe/echarts-gl/dist/echarts-gl.min.js'\nvideoStart: 2000\nvideoEnd: 6000\n*/\noption = {\n  backgroundColor: '#000',\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n    heightTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n    displacementScale: 0.04,\n    shading: 'realistic',\n    environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n    realisticMaterial: {\n      roughness: 0.9\n    },\n    postEffect: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 5,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        diffuseIntensity: 0.2\n      }\n    }\n  }\n};\n","graphgl-npm-dep":"/*\ntitle: NPM Dependencies with graphGL\ncategory: graphGL\ntheme: dark\ntitleCN: 1w 节点 2w7 边的NPM 依赖图\nshotDelay: 5000\nshotWidth: 1920\n*/\nfunction loadScript(scriptUrl, cb) {\n  var scriptTag = document.createElement('script');\n  scriptTag.onload = cb;\n  scriptTag.src = scriptUrl;\n  document.body.appendChild(scriptTag);\n}\nloadScript(\n  'https://jsd.cdn.zzko.cn/npm/echarts-graph-modularity@2.0.0/dist/echarts-graph-modularity.min.js',\n  function () {\n    // Reinit chart again\n    // TODO: visual encoding registerion must been done before echarts.init.\n    var dom = myChart.getDom();\n    myChart.dispose();\n    myChart = echarts.init(dom);\n    $.getJSON(ROOT_PATH + '/data-gl/asset/data/npmdep.json', function (data) {\n      var nodes = data.nodes.map(function (nodeName, idx) {\n        return {\n          name: nodeName,\n          value: data.dependentsCount[idx]\n        };\n      });\n      var edges = [];\n      for (var i = 0; i < data.edges.length; ) {\n        var s = data.edges[i++];\n        var t = data.edges[i++];\n        edges.push({\n          source: s,\n          target: t\n        });\n      }\n      nodes.forEach(function (node) {\n        // if (node.value > 100) {\n        node.emphasis = {\n          label: {\n            show: true\n          }\n        };\n        // }\n        if (node.value > 5000) {\n          node.label = {\n            show: true\n          };\n        }\n      });\n      myChart.setOption({\n        backgroundColor: '#000',\n        series: [\n          {\n            color: [\n              'rgb(203,239,15)',\n              'rgb(73,15,239)',\n              'rgb(15,217,239)',\n              'rgb(30,15,239)',\n              'rgb(15,174,239)',\n              'rgb(116,239,15)',\n              'rgb(239,15,58)',\n              'rgb(15,239,174)',\n              'rgb(239,102,15)',\n              'rgb(239,15,15)',\n              'rgb(15,44,239)',\n              'rgb(239,145,15)',\n              'rgb(30,239,15)',\n              'rgb(239,188,15)',\n              'rgb(159,239,15)',\n              'rgb(159,15,239)',\n              'rgb(15,239,44)',\n              'rgb(15,239,87)',\n              'rgb(15,239,217)',\n              'rgb(203,15,239)',\n              'rgb(239,15,188)',\n              'rgb(239,15,102)',\n              'rgb(239,58,15)',\n              'rgb(239,15,145)',\n              'rgb(116,15,239)',\n              'rgb(15,131,239)',\n              'rgb(73,239,15)',\n              'rgb(15,239,131)',\n              'rgb(15,87,239)',\n              'rgb(239,15,231)'\n            ],\n            type: 'graphGL',\n            nodes: nodes,\n            edges: edges,\n            modularity: {\n              resolution: 2,\n              sort: true\n            },\n            lineStyle: {\n              color: 'rgba(255,255,255,1)',\n              opacity: 0.05\n            },\n            itemStyle: {\n              opacity: 1\n              // borderColor: '#fff',\n              // borderWidth: 1\n            },\n            focusNodeAdjacency: false,\n            focusNodeAdjacencyOn: 'click',\n            symbolSize: function (value) {\n              return Math.sqrt(value / 10);\n            },\n            label: {\n              color: '#fff'\n            },\n            emphasis: {\n              label: {\n                show: false\n              },\n              lineStyle: {\n                opacity: 0.5,\n                width: 4\n              }\n            },\n            forceAtlas2: {\n              steps: 5,\n              stopThreshold: 20,\n              jitterTolerence: 10,\n              edgeWeight: [0.2, 1],\n              gravity: 5,\n              edgeWeightInfluence: 0\n              // preventOverlap: true\n            }\n          }\n        ]\n      });\n    });\n  }\n);\n","bar3d-simplex-noise":"/*\ntitle: Bar3D - Simplex Noise\ncategory: bar3D\ntitleCN: Bar3D - Simplex Noise\ntheme: dark\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var noise = new SimplexNoise(Math.random);\n  function generateData(theta, min, max) {\n    var data = [];\n    for (var i = 0; i <= 50; i++) {\n      for (var j = 0; j <= 50; j++) {\n        var value = noise.noise2D(i / 20, j / 20);\n        valMax = Math.max(valMax, value);\n        valMin = Math.min(valMin, value);\n        data.push([i, j, value * 2 + 4]);\n      }\n    }\n    return data;\n  }\n  var valMin = Infinity;\n  var valMax = -Infinity;\n  var data = generateData(2, -5, 5);\n  console.log(valMin, valMax);\n  myChart.setOption(\n    (option = {\n      visualMap: {\n        show: false,\n        min: 2,\n        max: 6,\n        inRange: {\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ]\n        }\n      },\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        max: 10,\n        min: 0\n      },\n      grid3D: {\n        axisLine: {\n          lineStyle: { color: '#fff' }\n        },\n        axisPointer: {\n          lineStyle: { color: '#fff' }\n        },\n        viewControl: {\n          // autoRotate: true\n        },\n        light: {\n          main: {\n            shadow: true,\n            quality: 'ultra',\n            intensity: 1.5\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar3D',\n          data: data,\n          shading: 'lambert',\n          label: {\n            formatter: function (param) {\n              return param.value[2].toFixed(1);\n            }\n          }\n        }\n      ]\n    })\n  );\n});\n","globe-atmosphere":"/*\ntitle: Globe with Atmosphere\ncategory: globe\ntitleCN: 大气层显示\n*/\noption = {\n  backgroundColor: '#000',\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',\n    shading: 'lambert',\n    environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n    atmosphere: {\n      show: true\n    },\n    light: {\n      ambient: {\n        intensity: 0.1\n      },\n      main: {\n        intensity: 1.5\n      }\n    }\n  },\n  series: []\n};\n","bar3d-global-population":"/*\ntitle: Bar3D - Global Population\ncategory: bar3D\ntitleCN: Bar3D - Global Population\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/population.json', function (data) {\n  data = data\n    .filter(function (dataItem) {\n      return dataItem[2] > 0;\n    })\n    .map(function (dataItem) {\n      return [dataItem[0], dataItem[1], Math.sqrt(dataItem[2])];\n    });\n  myChart.setOption({\n    backgroundColor: '#cdcfd5',\n    geo3D: {\n      map: 'world',\n      shading: 'lambert',\n      light: {\n        main: {\n          intensity: 5,\n          shadow: true,\n          shadowQuality: 'high',\n          alpha: 30\n        },\n        ambient: {\n          intensity: 0\n        },\n        ambientCubemap: {\n          texture: 'data-gl/asset/canyon.hdr',\n          exposure: 1,\n          diffuseIntensity: 0.5\n        }\n      },\n      viewControl: {\n        distance: 50,\n        panMouseButton: 'left',\n        rotateMouseButton: 'right'\n      },\n      groundPlane: {\n        show: true,\n        color: '#999'\n      },\n      postEffect: {\n        enable: true,\n        bloom: {\n          enable: false\n        },\n        SSAO: {\n          radius: 1,\n          intensity: 1,\n          enable: true\n        },\n        depthOfField: {\n          enable: false,\n          focalRange: 10,\n          blurRadius: 10,\n          fstop: 1\n        }\n      },\n      temporalSuperSampling: {\n        enable: true\n      },\n      itemStyle: {},\n      regionHeight: 2\n    },\n    visualMap: {\n      max: 40,\n      calculable: true,\n      realtime: false,\n      inRange: {\n        color: [\n          '#313695',\n          '#4575b4',\n          '#74add1',\n          '#abd9e9',\n          '#e0f3f8',\n          '#ffffbf',\n          '#fee090',\n          '#fdae61',\n          '#f46d43',\n          '#d73027',\n          '#a50026'\n        ]\n      },\n      outOfRange: {\n        colorAlpha: 0\n      }\n    },\n    series: [\n      {\n        type: 'bar3D',\n        coordinateSystem: 'geo3D',\n        shading: 'lambert',\n        data: data,\n        barSize: 0.1,\n        minHeight: 0.2,\n        silent: true,\n        itemStyle: {\n          color: 'orange'\n          // opacity: 0.8\n        }\n      }\n    ]\n  });\n});\n","globe-layers":"/*\ntitle: Globe Layers\ncategory: globe\ntitleCN: Globe Layers\nvideoStart: 2000\nvideoEnd: 6000\n*/\noption = {\n  backgroundColor: '#000',\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',\n    heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    displacementScale: 0.1,\n    shading: 'lambert',\n    environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n    light: {\n      ambient: {\n        intensity: 0.1\n      },\n      main: {\n        intensity: 1.5\n      }\n    },\n    layers: [\n      {\n        type: 'blend',\n        blendTo: 'emission',\n        texture: ROOT_PATH + '/data-gl/asset/night.jpg'\n      },\n      {\n        type: 'overlay',\n        texture: ROOT_PATH + '/data-gl/asset/clouds.png',\n        shading: 'lambert',\n        distance: 5\n      }\n    ]\n  },\n  series: []\n};\n","bar3d-noise-modified-from-marpi-demo":"/*\ntitle: Noise modified from marpi's demo\ncategory: bar3D\ntitleCN: Noise modified from marpi's demo\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var simplex = new SimplexNoise();\n  var UPDATE_DURATION = 1000;\n  function initVisualizer() {\n    var config = {\n      numWaves: 2,\n      randomize: randomize,\n      color1: '#000',\n      color2: '#300',\n      color3: '#fff',\n      size: 150,\n      roughness: 0.5,\n      metalness: 0\n    };\n    //gui.add(config, \"numWaves\", 1, 3).name(\"Waves number\").onChange(update).listen();\n    for (var i = 0; i < 2; i++) {\n      config['wave' + i + 'axis' + 'x'] = Math.random();\n      config['wave' + i + 'axis' + 'y'] = Math.random();\n      config['wave' + i + 'rounding'] = Math.random();\n      config['wave' + i + 'square'] = Math.random();\n    }\n    function randomize() {\n      //config.numWaves = Math.floor(Math.random() * 3) + 1;\n      for (var i = 0; i < 2; i++) {\n        config['wave' + i + 'axis' + 'x'] = Math.random();\n        config['wave' + i + 'axis' + 'y'] = Math.random();\n        config['wave' + i + 'rounding'] = Math.random();\n        config['wave' + i + 'square'] = Math.random();\n      }\n      // Iterate over all controllers\n      for (var i in gui.__controllers) {\n        gui.__controllers[i].updateDisplay();\n      }\n      update();\n    }\n    function update() {\n      var item = [];\n      var dataProvider = [];\n      var mod = 0.1;\n      //config.numWaves = Math.round(config.numWaves)\n      //var occurenceR = Math.random() * .02\n      //var r = 0//Math.random()\n      for (var s = 0; s < config.size * config.size; s++) {\n        var x = s % config.size;\n        var y = Math.floor(s / config.size);\n        //if (Math.random() < occurenceR)\n        //    r = Math.random()\n        var output = 0;\n        for (var i = 0; i < config.numWaves; i++) {\n          var n = simplex.noise2D(\n            i * 213 +\n              (-50 + x) * mod * (1 - config['wave' + i + 'axis' + 'x']) * 0.5,\n            i * 3124 +\n              (-50 + y) * mod * (1 - config['wave' + i + 'axis' + 'y']) * 0.5\n          );\n          n = Math.pow(n, 1.95 - 1.9 * config['wave' + i + 'rounding']);\n          var square = Math.floor((1.1 - config['wave' + i + 'square']) * 100);\n          n = Math.round(n * square) / square;\n          //output*=n\n          if (output < n) output = n;\n        }\n        dataProvider.push([x, y, (output + 0.1) * 2]);\n      }\n      myChart.setOption({\n        visualMap: {\n          inRange: {\n            barSize: 100 / config.size,\n            color: [config.color1, config.color2, config.color3]\n          }\n        },\n        series: [\n          {\n            data: dataProvider,\n            realisticMaterial: {\n              roughness: config.roughness,\n              metalness: config.metalness\n            }\n          }\n        ]\n      });\n      //setTimeout(update, UPDATE_DURATION);\n    }\n    update();\n  }\n  var focalRange = 40;\n  var blurRadius = 4;\n  myChart.setOption(\n    (option = {\n      toolbox: {\n        left: 20,\n        iconStyle: {\n          normal: {\n            borderColor: '#fff'\n          }\n        }\n      },\n      tooltip: {},\n      visualMap: {\n        show: false,\n        min: 0.1,\n        max: 2.5,\n        inRange: {\n          color: ['#000', '#300', '#fff']\n        }\n      },\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        min: -6,\n        max: 6\n      },\n      grid3D: {\n        show: false,\n        environment: '#000',\n        viewControl: {\n          distance: 100,\n          maxDistance: 150,\n          minDistance: 50,\n          alpha: 38,\n          beta: 220,\n          minAlpha: 10\n          //maxBeta: 360,\n        },\n        postEffect: {\n          enable: true,\n          SSAO: {\n            enable: true,\n            intensity: 1.3,\n            radius: 5\n          },\n          screenSpaceReflection: {\n            enable: false\n          },\n          depthOfField: {\n            enable: true,\n            blurRadius: blurRadius,\n            focalRange: focalRange,\n            focalDistance: 70\n          }\n        },\n        light: {\n          main: {\n            intensity: 1,\n            shadow: true,\n            shadowQuality: 'high',\n            alpha: 30\n          },\n          ambient: {\n            intensity: 0\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n            exposure: 2,\n            diffuseIntensity: 1,\n            specularIntensity: 1\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar3D',\n          silent: true,\n          shading: 'realistic',\n          realisticMaterial: {\n            roughness: 0.5,\n            metalness: 0\n          },\n          instancing: true,\n          barSize: 0.6,\n          data: [],\n          lineStyle: {\n            width: 4\n          },\n          itemStyle: {\n            color: '#fff'\n          },\n          animation: false,\n          animationDurationUpdate: UPDATE_DURATION\n        }\n      ]\n    })\n  );\n  setTimeout(function () {\n    initVisualizer();\n  });\n});\n","bar3d-voxelize-image":"/*\ntitle: Voxelize image\ncategory: bar3D\ntitleCN: Voxelize image\n*/\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nvar imgData;\nvar currentImg;\n// Configurations\nvar config = {\n  scale: 0.3,\n  roughness: 0,\n  metalness: 1,\n  projection: 'orthographic',\n  depthOfField: 4,\n  lockY: false,\n  move: true,\n  sameColor: false,\n  color: '#777',\n  colorContrast: 1.2,\n  lightIntensity: 1,\n  lightColor: '#fff',\n  lightRotate: 30,\n  lightPitch: 40,\n  AO: 1.5,\n  showEnvironment: false,\n  barNumber: 80,\n  barBevel: 0.18,\n  barSize: 1.2\n};\noption = {\n  tooltip: {},\n  backgroundColor: '#000',\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value',\n    min: 0,\n    max: 100\n  },\n  grid3D: {\n    show: false,\n    viewControl: {\n      projection: 'perspective',\n      alpha: 45,\n      beta: -45,\n      panSensitivity: config.move ? 1 : 0,\n      rotateSensitivity: config.lockY ? [1, 0] : 1,\n      damping: 0.9,\n      distance: 60\n    },\n    postEffect: {\n      enable: true,\n      bloom: {\n        intensity: 0.2\n      },\n      screenSpaceAmbientOcclusion: {\n        enable: true,\n        intensity: 1.5,\n        radius: 5,\n        quality: 'high'\n      },\n      screenSpaceReflection: {\n        enable: true\n      },\n      depthOfField: {\n        enable: true,\n        blurRadius: config.depthOfField,\n        fstop: 10,\n        focalDistance: 55\n      }\n    },\n    boxDepth: 100,\n    boxHeight: 20,\n    environment: 'none',\n    light: {\n      main: {\n        shadow: true,\n        intensity: 2\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 2,\n        diffuseIntensity: 0.2,\n        specularIntensity: 1.5\n      }\n    }\n  }\n};\nfunction updateData(pixelData, width, height) {\n  console.time('update');\n  var data = new Float32Array((pixelData.length / 4) * 3);\n  var off = 0;\n  for (var i = 0; i < pixelData.length / 4; i++) {\n    var r = pixelData[i * 4];\n    var g = pixelData[i * 4 + 1];\n    var b = pixelData[i * 4 + 2];\n    var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n    lum = (lum - 125) * config.scale + 50;\n    data[off++] = i % width;\n    data[off++] = height - Math.floor(i / width);\n    data[off++] = lum;\n  }\n  myChart.setOption({\n    grid3D: {\n      boxWidth: (100 / height) * width\n    },\n    series: [\n      {\n        animation: false,\n        type: 'bar3D',\n        shading: 'realistic',\n        realisticMaterial: {\n          roughness: config.roughness,\n          metalness: config.metalness\n        },\n        barSize: config.barSize,\n        bevelSize: config.barBevel,\n        silent: true,\n        dimensions: ['x', 'y', 'z'],\n        itemStyle: {\n          color: config.sameColor\n            ? config.color\n            : function (params) {\n                var i = params.dataIndex;\n                var r = pixelData[i * 4] / 255;\n                var g = pixelData[i * 4 + 1] / 255;\n                var b = pixelData[i * 4 + 2] / 255;\n                var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n                r *= lum * config.colorContrast;\n                g *= lum * config.colorContrast;\n                b *= lum * config.colorContrast;\n                return [r, g, b, 1];\n              }\n        },\n        data: data\n      }\n    ]\n  });\n  console.timeEnd('update');\n}\nfunction loadImage(img) {\n  var height = (canvas.height = Math.min(config.barNumber, img.height));\n  var aspect = img.width / img.height;\n  var width = (canvas.width = Math.round(height * aspect));\n  ctx.drawImage(img, 0, 0, width, height);\n  imgData = ctx.getImageData(0, 0, width, height);\n  updateData(imgData.data, width, height);\n}\n// Default\nvar img = new Image();\nimg.onload = function () {\n  loadImage(img);\n  currentImg = img;\n};\nimg.src = ROOT_PATH + '/data-gl/asset/bitcoin.png';\n","metal-bar3d":"/*\ntitle: Metal Bar3D\ncategory: bar3D\ntitleCN: Metal Bar3D\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var noise = new SimplexNoise(Math.random);\n  function generateData(theta, min, max) {\n    var data = [];\n    for (var i = 0; i <= 20; i++) {\n      for (var j = 0; j <= 20; j++) {\n        var value = noise.noise2D(i / 20, j / 20);\n        valMax = Math.max(valMax, value);\n        valMin = Math.min(valMin, value);\n        data.push([i, j, value * 2 + 4]);\n      }\n    }\n    return data;\n  }\n  var valMin = Infinity;\n  var valMax = -Infinity;\n  var data = generateData(2, -5, 5);\n  myChart.setOption(\n    (option = {\n      tooltip: {},\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        max: 10,\n        min: 0\n      },\n      grid3D: {\n        environment: '#000',\n        axisPointer: {\n          show: false\n        },\n        postEffect: {\n          enable: true,\n          SSAO: {\n            enable: true,\n            radius: 5\n          }\n        },\n        light: {\n          main: {\n            intensity: 3\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n            exposure: 1,\n            diffuseIntensity: 0.5,\n            specularIntensity: 2\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar3D',\n          data: data,\n          barSize: 4,\n          bevelSize: 0.4,\n          bevelSmoothness: 4,\n          shading: 'realistic',\n          realisticMaterial: {\n            roughness: 0.3,\n            metalness: 1\n          },\n          label: {\n            textStyle: {\n              fontSize: 16,\n              borderWidth: 1\n            }\n          },\n          itemStyle: {\n            color: '#ccc'\n          },\n          emphasis: {\n            label: {\n              show: false\n            }\n          }\n        }\n      ]\n    })\n  );\n});\n","parametric-surface-rose":"/*\ntitle: Parametric Surface Rose\ncategory: surface\ntitleCN: Parametric Surface Rose\n*/\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar sqrt = Math.sqrt;\nvar cosh = Math.cosh;\nvar sinh = Math.sinh;\nvar exp = Math.exp;\nvar PI = Math.PI;\nvar square = function (x) {\n  return x * x;\n};\nvar mod2 = function (a, b) {\n  var c = a % b;\n  return c > 0 ? c : c + b;\n};\nvar theta1 = -(20 / 9) * PI;\nvar theta2 = 15 * PI;\nfunction getParametricEquation() {\n  return {\n    u: {\n      min: 0,\n      max: 1,\n      step: 1 / 24\n    },\n    v: {\n      min: theta1,\n      max: theta2,\n      step: (theta2 - theta1) / 575\n    },\n    x: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * sin(theta);\n    },\n    y: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * cos(theta);\n    },\n    z: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return X * (x1 * cos(phi) - y1 * sin(phi));\n    }\n  };\n}\noption = {\n  toolbox: {\n    feature: {\n      saveAsImage: {\n        backgroundColor: '#111'\n      }\n    },\n    iconStyle: {\n      normal: {\n        borderColor: '#fff'\n      }\n    },\n    left: 0\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    show: false,\n    axisPointer: {\n      show: false\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#fff'\n      }\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 10,\n        intensity: 2\n      },\n      edge: {\n        enable: true\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 3,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n        exposure: 0,\n        diffuseIntensity: 1,\n        specularIntensity: 0.5\n      }\n    },\n    viewControl: {\n      // projection: 'orthographic'\n    }\n  },\n  series: [\n    {\n      type: 'surface',\n      parametric: true,\n      shading: 'realistic',\n      silent: true,\n      wireframe: {\n        show: false\n      },\n      realisticMaterial: {\n        baseTexture:\n          ROOT_PATH + '/asset/get/s/data-1494250104909-SkZtfeAyZ.jpg',\n        roughness: 0.7,\n        metalness: 0,\n        textureTiling: [200, 20]\n      },\n      itemStyle: {\n        color: '#fff'\n      },\n      parametricEquation: getParametricEquation()\n    }\n  ]\n};\n","line3d-orthographic":"/*\ntitle: Orthographic Projection\ncategory: line3D\ntitleCN: 三维折线图正交投影\n*/\nvar data = [];\n// Parametric curve\nfor (var t = 0; t < 25; t += 0.001) {\n  var x = (1 + 0.25 * Math.cos(75 * t)) * Math.cos(t);\n  var y = (1 + 0.25 * Math.cos(75 * t)) * Math.sin(t);\n  var z = t + 2.0 * Math.sin(75 * t);\n  data.push([x, y, z]);\n}\nconsole.log(data.length);\noption = {\n  tooltip: {},\n  backgroundColor: '#fff',\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: 0,\n    max: 30,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    viewControl: {\n      projection: 'orthographic'\n    }\n  },\n  series: [\n    {\n      type: 'line3D',\n      data: data,\n      lineStyle: {\n        width: 4\n      }\n    }\n  ]\n};\n","scatter3d-scatter":"/*\ntitle: 3D Scatter with Scatter Matrix\ncategory: scatter3D\ntitleCN: 三维散点图和散点矩阵结合使用\n*/\n$.get(\n  ROOT_PATH + '/data/asset/data/life-expectancy-table.json',\n  function (data) {\n    var sizeValue = '57%';\n    var symbolSize = 2.5;\n    option = {\n      tooltip: {},\n      grid3D: {\n        width: '50%'\n      },\n      xAxis3D: {},\n      yAxis3D: {},\n      zAxis3D: {},\n      grid: [\n        { left: '50%', width: '20%', bottom: sizeValue },\n        { left: '75%', width: '20%', bottom: sizeValue },\n        { left: '50%', width: '20%', top: sizeValue },\n        { left: '75%', width: '20%', top: sizeValue }\n      ],\n      xAxis: [\n        {\n          type: 'value',\n          gridIndex: 0,\n          name: 'Income',\n          axisLabel: { rotate: 50, interval: 0 }\n        },\n        {\n          type: 'category',\n          gridIndex: 1,\n          name: 'Country',\n          boundaryGap: false,\n          axisLabel: { rotate: 50, interval: 0 }\n        },\n        {\n          type: 'value',\n          gridIndex: 2,\n          name: 'Income',\n          axisLabel: { rotate: 50, interval: 0 }\n        },\n        {\n          type: 'value',\n          gridIndex: 3,\n          name: 'Life Expectancy',\n          axisLabel: { rotate: 50, interval: 0 }\n        }\n      ],\n      yAxis: [\n        { type: 'value', gridIndex: 0, name: 'Life Expectancy' },\n        { type: 'value', gridIndex: 1, name: 'Income' },\n        { type: 'value', gridIndex: 2, name: 'Population' },\n        { type: 'value', gridIndex: 3, name: 'Population' }\n      ],\n      dataset: {\n        dimensions: [\n          'Income',\n          'Life Expectancy',\n          'Population',\n          'Country',\n          { name: 'Year', type: 'ordinal' }\n        ],\n        source: data\n      },\n      series: [\n        {\n          type: 'scatter3D',\n          symbolSize: 3,\n          encode: {\n            x: 'Population',\n            y: 'Life Expectancy',\n            z: 'Income',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        },\n        {\n          type: 'scatter',\n          symbolSize: symbolSize,\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          encode: {\n            x: 'Income',\n            y: 'Life Expectancy',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        },\n        {\n          type: 'scatter',\n          symbolSize: symbolSize,\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          encode: {\n            x: 'Country',\n            y: 'Income',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        },\n        {\n          type: 'scatter',\n          symbolSize: symbolSize,\n          xAxisIndex: 2,\n          yAxisIndex: 2,\n          encode: {\n            x: 'Income',\n            y: 'Population',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        },\n        {\n          type: 'scatter',\n          symbolSize: symbolSize,\n          xAxisIndex: 3,\n          yAxisIndex: 3,\n          encode: {\n            x: 'Life Expectancy',\n            y: 'Population',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }\n      ]\n    };\n    myChart.setOption(option);\n  }\n);\n","iron-globe":"/*\ntitle: Iron globe\ncategory: globe\ntitleCN: Iron globe\n*/\noption = {\n  backgroundColor: '#000',\n  globe: {\n    baseTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n    heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n    displacementScale: 0.2,\n    shading: 'realistic',\n    environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n    realisticMaterial: {\n      roughness: ROOT_PATH + '/asset/get/s/data-1497599804873-H1SHkG-mZ.jpg',\n      metalness: ROOT_PATH + '/asset/get/s/data-1497599800643-BJbHyGWQW.jpg',\n      textureTiling: [8, 4]\n    },\n    postEffect: {\n      enable: true\n    },\n    viewControl: {\n      autoRotate: false\n    },\n    light: {\n      main: {\n        intensity: 2,\n        shadow: true\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 2,\n        diffuseIntensity: 2,\n        specularIntensity: 2\n      }\n    }\n  }\n};\n","linesGL-ny":"/*\ntitle: Use linesGL to draw 1 million ny streets.\ntitleCN: 实时交互的纽约街道可视化\ncategory: linesGL\n*/\nvar CHUNK_COUNT = 32;\nvar dataCount = 0;\nfunction fetchData(idx) {\n  if (idx >= CHUNK_COUNT) {\n    return;\n  }\n  var dataURL =\n    ROOT_PATH + '/data/asset/data/links-ny/links_ny_' + idx + '.bin';\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', dataURL, true);\n  xhr.responseType = 'arraybuffer';\n  xhr.onload = function (e) {\n    var rawData = new Float32Array(this.response);\n    var data = new Float64Array(rawData.length - 2);\n    var offsetX = rawData[0];\n    var offsetY = rawData[1];\n    var off = 0;\n    var addedDataCount = 0;\n    for (var i = 2; i < rawData.length; ) {\n      var count = rawData[i++];\n      data[off++] = count;\n      for (var k = 0; k < count; k++) {\n        var x = rawData[i++] + offsetX;\n        var y = rawData[i++] + offsetY;\n        data[off++] = x;\n        data[off++] = y;\n        addedDataCount++;\n      }\n    }\n    myChart.appendData({\n      seriesIndex: 0,\n      data: data\n    });\n    dataCount += addedDataCount;\n    fetchData(idx + 1);\n  };\n  xhr.send();\n}\noption = {\n  progressive: 20000,\n  backgroundColor: '#111',\n  geo: {\n    center: [-74.04327099998152, 40.86737600240287],\n    zoom: 360,\n    map: 'world',\n    roam: true,\n    silent: true,\n    itemStyle: {\n      normal: {\n        color: 'transparent',\n        borderColor: 'rgba(255,255,255,0.1)',\n        borderWidth: 1\n      }\n    }\n  },\n  series: [\n    {\n      type: 'linesGL',\n      coordinateSystem: 'geo',\n      blendMode: 'lighter',\n      dimensions: ['value'],\n      data: new Float64Array(),\n      polyline: true,\n      large: true,\n      lineStyle: {\n        color: 'orange',\n        opacity: 0.3\n      }\n    }\n  ]\n};\nfetchData(0);\n","map3d-alcohol-consumption":"/*\ntitle: Map3D - Alcohol Consumption\ncategory: map3D\ntitleCN: Map3D - Alcohol Consumption\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/alcohol.json', function (data) {\n  var regionData = data.map(function (item) {\n    return {\n      name: item[0],\n      value: item[1]\n    };\n  });\n  console.log(regionData);\n  myChart.setOption({\n    backgroundColor: '#cdcfd5',\n    visualMap: {\n      min: 0,\n      max: 15,\n      realtime: true,\n      calculable: true,\n      inRange: {\n        color: [\n          '#313695',\n          '#4575b4',\n          '#74add1',\n          '#abd9e9',\n          '#e0f3f8',\n          '#ffffbf',\n          '#fee090',\n          '#fdae61',\n          '#f46d43',\n          '#d73027',\n          '#a50026'\n        ]\n      }\n    },\n    series: [\n      {\n        type: 'map3D',\n        map: 'world',\n        shading: 'lambert',\n        realisticMaterial: {\n          roughness: 0.2,\n          metalness: 0\n        },\n        postEffect: {\n          enable: true,\n          SSAO: {\n            enable: true,\n            radius: 2,\n            intensity: 1\n          }\n        },\n        groundPlane: {\n          show: true\n        },\n        light: {\n          main: {\n            intensity: 2,\n            shadow: true,\n            shadowQuality: 'high',\n            alpha: 30\n          },\n          ambient: {\n            intensity: 0\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n            exposure: 1,\n            diffuseIntensity: 1\n          }\n        },\n        viewControl: {\n          distance: 50\n        },\n        regionHeight: 1,\n        data: regionData\n      }\n    ]\n  });\n});\n","lines3d-flights-on-geo3d":"/*\ntitle: Flights on Geo3D\ncategory: lines3D\ntitleCN: Flights on Geo3D\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/flights.json', function (data) {\n  function getAirportCoord(idx) {\n    return [data.airports[idx][3], data.airports[idx][4]];\n  }\n  var routes = data.routes.map(function (airline) {\n    return [getAirportCoord(airline[1]), getAirportCoord(airline[2])];\n  });\n  myChart.setOption({\n    geo3D: {\n      map: 'world',\n      shading: 'color',\n      environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n      silent: true,\n      groundPlane: {\n        show: false\n      },\n      light: {\n        main: {\n          intensity: 0\n        },\n        ambient: {\n          intensity: 0\n        }\n      },\n      viewControl: {\n        distance: 50\n      },\n      itemStyle: {\n        color: '#111'\n      },\n      boxHeight: 0.5\n    },\n    series: [\n      {\n        type: 'lines3D',\n        coordinateSystem: 'geo3D',\n        effect: {\n          show: true,\n          trailWidth: 2,\n          trailLength: 0.2\n        },\n        blendMode: 'lighter',\n        lineStyle: {\n          width: 0,\n          color: 'rgb(50, 50, 150)',\n          opacity: 0.2\n        },\n        data: routes\n      }\n    ]\n  });\n});\nwindow.addEventListener('keydown', function () {\n  myChart.dispatchAction({\n    type: 'lines3DToggleEffect',\n    seriesIndex: 0\n  });\n});\n","lines3d-flights-gl":"/*\ntitle: Flights GL\ncategory: lines3D\ntitleCN: Flights GL\nvideoStart: 2000\nvideoEnd: 8000\n*/\nvar uploadedDataURL = ROOT_PATH + '/data-gl/asset/data/flights.json';\nmyChart.showLoading();\n$.getJSON(uploadedDataURL, function (data) {\n  myChart.hideLoading();\n  function getAirportCoord(idx) {\n    return [data.airports[idx][3], data.airports[idx][4]];\n  }\n  var routes = data.routes.map(function (airline) {\n    return [getAirportCoord(airline[1]), getAirportCoord(airline[2])];\n  });\n  myChart.setOption({\n    geo3D: {\n      map: 'world',\n      shading: 'realistic',\n      silent: true,\n      environment: '#333',\n      realisticMaterial: {\n        roughness: 0.8,\n        metalness: 0\n      },\n      postEffect: {\n        enable: true\n      },\n      groundPlane: {\n        show: false\n      },\n      light: {\n        main: {\n          intensity: 1,\n          alpha: 30\n        },\n        ambient: {\n          intensity: 0\n        }\n      },\n      viewControl: {\n        distance: 70,\n        alpha: 89,\n        panMouseButton: 'left',\n        rotateMouseButton: 'right'\n      },\n      itemStyle: {\n        color: '#000'\n      },\n      regionHeight: 0.5\n    },\n    series: [\n      {\n        type: 'lines3D',\n        coordinateSystem: 'geo3D',\n        effect: {\n          show: true,\n          trailWidth: 1,\n          trailOpacity: 0.5,\n          trailLength: 0.2,\n          constantSpeed: 5\n        },\n        blendMode: 'lighter',\n        lineStyle: {\n          width: 0.2,\n          opacity: 0.05\n        },\n        data: routes\n      }\n    ]\n  });\n  window.addEventListener('keydown', function () {\n    myChart.dispatchAction({\n      type: 'lines3DToggleEffect',\n      seriesIndex: 0\n    });\n  });\n});\n","scatter3d":"/*\ntitle: Scatter3D\ncategory: scatter3D\ntheme: dark\ntitleCN: Scatter3D\n*/\nvar indices = {\n  name: 0,\n  group: 1,\n  id: 16\n};\nvar schema = [\n  { name: 'name', index: 0 },\n  { name: 'group', index: 1 },\n  { name: 'protein', index: 2 },\n  { name: 'calcium', index: 3 },\n  { name: 'sodium', index: 4 },\n  { name: 'fiber', index: 5 },\n  { name: 'vitaminc', index: 6 },\n  { name: 'potassium', index: 7 },\n  { name: 'carbohydrate', index: 8 },\n  { name: 'sugars', index: 9 },\n  { name: 'fat', index: 10 },\n  { name: 'water', index: 11 },\n  { name: 'calories', index: 12 },\n  { name: 'saturated', index: 13 },\n  { name: 'monounsat', index: 14 },\n  { name: 'polyunsat', index: 15 },\n  { name: 'id', index: 16 }\n];\nvar data;\nvar fieldIndices = schema.reduce(function (obj, item) {\n  obj[item.name] = item.index;\n  return obj;\n}, {});\nvar groupCategories = [];\nvar groupColors = [];\nvar data;\nvar fieldNames = schema.map(function (item) {\n  return item.name;\n});\nfieldNames = fieldNames.slice(2, fieldNames.length - 2);\nfunction getMaxOnExtent(data) {\n  var colorMax = -Infinity;\n  var symbolSizeMax = -Infinity;\n  for (var i = 0; i < data.length; i++) {\n    var item = data[i];\n    var colorVal = item[fieldIndices[config.color]];\n    var symbolSizeVal = item[fieldIndices[config.symbolSize]];\n    colorMax = Math.max(colorVal, colorMax);\n    symbolSizeMax = Math.max(symbolSizeVal, symbolSizeMax);\n  }\n  return {\n    color: colorMax,\n    symbolSize: symbolSizeMax\n  };\n}\nvar config = (app.config = {\n  xAxis3D: 'protein',\n  yAxis3D: 'fiber',\n  zAxis3D: 'sodium',\n  color: 'fiber',\n  symbolSize: 'vitaminc',\n  onChange: function () {\n    var max = getMaxOnExtent(data);\n    if (data) {\n      myChart.setOption({\n        visualMap: [\n          {\n            max: max.color / 2\n          },\n          {\n            max: max.symbolSize / 2\n          }\n        ],\n        xAxis3D: {\n          name: config.xAxis3D\n        },\n        yAxis3D: {\n          name: config.yAxis3D\n        },\n        zAxis3D: {\n          name: config.zAxis3D\n        },\n        series: {\n          dimensions: [\n            config.xAxis3D,\n            config.yAxis3D,\n            config.yAxis3D,\n            config.color,\n            config.symbolSiz\n          ],\n          data: data.map(function (item, idx) {\n            return [\n              item[fieldIndices[config.xAxis3D]],\n              item[fieldIndices[config.yAxis3D]],\n              item[fieldIndices[config.zAxis3D]],\n              item[fieldIndices[config.color]],\n              item[fieldIndices[config.symbolSize]],\n              idx\n            ];\n          })\n        }\n      });\n    }\n  }\n});\napp.configParameters = {};\n['xAxis3D', 'yAxis3D', 'zAxis3D', 'color', 'symbolSize'].forEach(function (\n  fieldName\n) {\n  app.configParameters[fieldName] = {\n    options: fieldNames\n  };\n});\n$.getJSON(ROOT_PATH + '/data/asset/data/nutrients.json', function (_data) {\n  data = _data;\n  var max = getMaxOnExtent(data);\n  myChart.setOption({\n    tooltip: {},\n    visualMap: [\n      {\n        top: 10,\n        calculable: true,\n        dimension: 3,\n        max: max.color / 2,\n        inRange: {\n          color: [\n            '#1710c0',\n            '#0b9df0',\n            '#00fea8',\n            '#00ff0d',\n            '#f5f811',\n            '#f09a09',\n            '#fe0300'\n          ]\n        },\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      {\n        bottom: 10,\n        calculable: true,\n        dimension: 4,\n        max: max.symbolSize / 2,\n        inRange: {\n          symbolSize: [10, 40]\n        },\n        textStyle: {\n          color: '#fff'\n        }\n      }\n    ],\n    xAxis3D: {\n      name: config.xAxis3D,\n      type: 'value'\n    },\n    yAxis3D: {\n      name: config.yAxis3D,\n      type: 'value'\n    },\n    zAxis3D: {\n      name: config.zAxis3D,\n      type: 'value'\n    },\n    grid3D: {\n      axisLine: {\n        lineStyle: {\n          color: '#fff'\n        }\n      },\n      axisPointer: {\n        lineStyle: {\n          color: '#ffbd67'\n        }\n      },\n      viewControl: {\n        // autoRotate: true\n        // projection: 'orthographic'\n      }\n    },\n    series: [\n      {\n        type: 'scatter3D',\n        dimensions: [\n          config.xAxis3D,\n          config.yAxis3D,\n          config.yAxis3D,\n          config.color,\n          config.symbolSiz\n        ],\n        data: data.map(function (item, idx) {\n          return [\n            item[fieldIndices[config.xAxis3D]],\n            item[fieldIndices[config.yAxis3D]],\n            item[fieldIndices[config.zAxis3D]],\n            item[fieldIndices[config.color]],\n            item[fieldIndices[config.symbolSize]],\n            idx\n          ];\n        }),\n        symbolSize: 12,\n        // symbol: 'triangle',\n        itemStyle: {\n          borderWidth: 1,\n          borderColor: 'rgba(255,255,255,0.8)'\n        },\n        emphasis: {\n          itemStyle: {\n            color: '#fff'\n          }\n        }\n      }\n    ]\n  });\n});\n","map3d-wood-city":"/*\ntitle: Wood City\ncategory: map3D\ntitleCN: Wood City\n*/\n$.getJSON(\n  ROOT_PATH + '/data-gl/asset/data/buildings.json',\n  function (buildingsGeoJSON) {\n    echarts.registerMap('buildings', buildingsGeoJSON);\n    var regions = buildingsGeoJSON.features.map(function (feature) {\n      return {\n        name: feature.properties.name,\n        value: Math.max(Math.sqrt(feature.properties.height), 0.1),\n        height: Math.max(Math.sqrt(feature.properties.height), 0.1)\n      };\n    });\n    myChart.setOption({\n      series: [\n        {\n          type: 'map3D',\n          map: 'buildings',\n          shading: 'realistic',\n          realisticMaterial: {\n            roughness: 0.6,\n            textureTiling: 20,\n            detailTexture: ROOT_PATH + '/data-gl/asset/woods.jpg'\n          },\n          postEffect: {\n            enable: true,\n            bloom: {\n              enable: false\n            },\n            SSAO: {\n              enable: true,\n              quality: 'medium',\n              radius: 10,\n              intensity: 1.2\n            },\n            depthOfField: {\n              enable: false,\n              focalRange: 5,\n              fstop: 1,\n              blurRadius: 6\n            }\n          },\n          groundPlane: {\n            show: true,\n            color: '#333'\n          },\n          light: {\n            main: {\n              intensity: 6,\n              shadow: true,\n              shadowQuality: 'high',\n              alpha: 30\n            },\n            ambient: {\n              intensity: 0\n            },\n            ambientCubemap: {\n              texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n              exposure: 2,\n              diffuseIntensity: 1,\n              specularIntensity: 1\n            }\n          },\n          viewControl: {\n            minBeta: -360,\n            maxBeta: 360\n          },\n          itemStyle: {\n            areaColor: '#666'\n          },\n          label: {\n            color: 'white'\n          },\n          silent: true,\n          instancing: true,\n          boxWidth: 200,\n          boxHeight: 1,\n          data: regions\n        }\n      ]\n    });\n  }\n);\n","map3d-wood-map":"/*\ntitle: 木质世界地图\ncategory: map3D\ntitleCN: 木质世界地图\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/alcohol.json', function (data) {\n  var regionData = data.map(function (item) {\n    return {\n      name: item[0],\n      height: Math.pow(item[1], 0.2) + 1\n    };\n  });\n  option = {\n    series: [\n      {\n        type: 'map3D',\n        map: 'world',\n        shading: 'realistic',\n        realisticMaterial: {\n          roughness: ROOT_PATH + '/data-gl/asset/wood/roughness.jpg',\n          normalTexture: ROOT_PATH + '/data-gl/asset/wood/normal.jpg',\n          detailTexture: ROOT_PATH + '/data-gl/asset/wood/diffuse.jpg',\n          textureTiling: [2, 2]\n        },\n        postEffect: {\n          enable: true,\n          SSAO: {\n            enable: true,\n            radius: 3,\n            intensity: 1.4,\n            quality: 'high'\n          }\n        },\n        light: {\n          main: {\n            intensity: 2,\n            shadow: true,\n            shadowQuality: 'high',\n            alpha: 150,\n            beta: 0\n          },\n          ambient: {\n            intensity: 0\n          },\n          ambientCubemap: {\n            diffuseIntensity: 2,\n            specularIntensity: 2,\n            texture: ROOT_PATH + '/data-gl/asset/canyon.hdr'\n          }\n        },\n        viewControl: {\n          alpha: 89,\n          rotateMouseButton: 'right',\n          panMouseButton: 'left',\n          distance: 80\n        },\n        groundPlane: {\n          show: true,\n          color: '#333',\n          realisticMaterial: {\n            roughness: ROOT_PATH + '/data-gl/asset/redbricks/roughness.jpg',\n            normalTexture: ROOT_PATH + '/data-gl/asset/redbricks/normal.jpg',\n            detailTexture: ROOT_PATH + '/data-gl/asset/redbricks/diffuse.jpg',\n            textureTiling: [8, 4]\n          }\n        },\n        data: regionData\n      }\n    ]\n  };\n  myChart.setOption(option);\n});\n","scatter3d-simplex-noise":"/*\ntitle: Scatter3D - Simplex Noise\ncategory: scatter3D\ntheme: dark\ntitleCN: Scatter3D - Simplex Noise\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var noise = new SimplexNoise(Math.random);\n  function generateData(theta, min, max) {\n    var data = [];\n    for (var i = 0; i <= 20; i++) {\n      for (var j = 0; j <= 20; j++) {\n        for (var k = 0; k <= 20; k++) {\n          var value = noise.noise3D(i / 10, j / 10, k / 10);\n          valMax = Math.max(valMax, value);\n          valMin = Math.min(valMin, value);\n          data.push([i, j, k, value * 2 + 4]);\n        }\n      }\n    }\n    return data;\n  }\n  var valMin = Infinity;\n  var valMax = -Infinity;\n  var data = generateData(2, -5, 5);\n  console.log(valMin, valMax);\n  myChart.setOption(\n    (option = {\n      visualMap: {\n        show: false,\n        min: 2,\n        max: 6,\n        inRange: {\n          symbolSize: [0.5, 25],\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ],\n          colorAlpha: [0.2, 1]\n        }\n      },\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value'\n      },\n      grid3D: {\n        axisLine: {\n          lineStyle: { color: '#fff' }\n        },\n        axisPointer: {\n          lineStyle: { color: '#fff' }\n        },\n        viewControl: {\n          // autoRotate: true\n        }\n      },\n      series: [\n        {\n          type: 'scatter3D',\n          data: data\n        }\n      ]\n    })\n  );\n});\n","surface-leather":"/*\ntitle: Leather Material\ncategory: surface\ntitleCN: 皮革材质\n*/\nvar TILING = [4, 2];\nvar heightImg = new Image();\nheightImg.onload = update;\nheightImg.crossOrigin = 'anonymous';\nheightImg.src = ROOT_PATH + '/data-gl/asset/leather/leather_height.jpg';\nfunction update() {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var width = (canvas.width = heightImg.width);\n  var height = (canvas.height = heightImg.height);\n  ctx.drawImage(heightImg, 0, 0, width, height);\n  var imgData = ctx.getImageData(0, 0, width, height).data;\n  function getScale(u, v) {\n    u = ((u / Math.PI) * 0.5 + 0.5) * TILING[0];\n    v = (v / Math.PI) * TILING[1];\n    u = Math.floor((u - Math.floor(u)) * (width - 1));\n    v = Math.floor((1 - v + Math.floor(v)) * (height - 1));\n    var idx = v * width + u;\n    return 1 + imgData[idx * 4] / 255 / 20;\n  }\n  myChart.setOption({\n    xAxis3D: {\n      type: 'value',\n      min: -1.5,\n      max: 1.5\n    },\n    yAxis3D: {\n      type: 'value',\n      min: -1.5,\n      max: 1.5\n    },\n    zAxis3D: {\n      type: 'value',\n      min: -1.5,\n      max: 1.5\n    },\n    grid3D: {\n      show: false,\n      environment: 'none',\n      axisPointer: {\n        show: false\n      },\n      postEffect: {\n        enable: true,\n        screenSpaceAmbientOcclusion: {\n          enable: true,\n          radius: 10,\n          intensity: 2,\n          quality: 'high'\n        },\n        screenSpaceReflection: {\n          enable: false\n        },\n        depthOfField: {\n          enable: false,\n          focalRange: 10,\n          fstop: 4\n        }\n      },\n      temporalSuperSampling: {\n        enable: true\n      },\n      light: {\n        main: {\n          intensity: 2,\n          shadow: true\n        },\n        ambient: {\n          intensity: 0\n        },\n        ambientCubemap: {\n          texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n          exposure: 1,\n          diffuseIntensity: 1,\n          specularIntensity: 2\n        }\n      },\n      viewControl: {\n        distance: 80\n        // projection: 'orthographic'\n      }\n    },\n    series: [\n      {\n        type: 'surface',\n        parametric: true,\n        shading: 'realistic',\n        silent: true,\n        wireframe: {\n          show: false\n        },\n        realisticMaterial: {\n          // detailTexture: 'asset/leather/leather_albedo.jpg',\n          roughness: ROOT_PATH + '/data-gl/asset/leather/leather_roughness.jpg',\n          normalTexture:\n            ROOT_PATH + '/data-gl/asset/leather/leather_normal.jpg',\n          textureTiling: TILING\n        },\n        itemStyle: {\n          color: '#300'\n        },\n        parametricEquation: {\n          u: {\n            min: -Math.PI,\n            max: Math.PI,\n            step: Math.PI / 100\n          },\n          v: {\n            min: 0.4,\n            max: Math.PI - 0.4,\n            step: Math.PI / 100\n          },\n          x: function (u, v) {\n            return Math.sin(v) * Math.sin(u) * getScale(u, v);\n          },\n          y: function (u, v) {\n            return Math.sin(v) * Math.cos(u) * getScale(u, v);\n          },\n          z: function (u, v) {\n            return Math.cos(v) * getScale(u, v);\n          }\n        }\n      }\n    ]\n  });\n}\n","surface-breather":"/*\ntitle: Breather\ncategory: surface\ntitleCN: Breather\n*/\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar sqrt = Math.sqrt;\nvar cosh = Math.cosh;\nvar sinh = Math.sinh;\nvar PI = Math.PI;\nvar aa = 0.4;\nvar r = 1 - aa * aa;\nvar w = sqrt(r);\noption = {\n  toolbox: {\n    left: 20,\n    iconStyle: {\n      normal: {\n        borderColor: '#000'\n      }\n    },\n    feature: {\n      myExportObj: {\n        title: 'Export OBJ',\n        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n        onclick: function () {\n          var res = echarts.exportGL2PLY(myChart, {\n            mainType: 'grid3D',\n            index: 0\n          });\n          download(res, 'surface.ply', 'text/plain');\n        }\n      }\n    }\n  },\n  tooltip: {},\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -3,\n    max: 3,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {},\n  yAxis3D: {},\n  zAxis3D: {},\n  grid3D: {\n    show: true,\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 4\n      }\n    },\n    viewControl: {\n      distance: 130,\n      beta: 50\n    },\n    light: {\n      main: {\n        intensity: 2,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n        exposure: 2,\n        diffuseIntensity: 0.2,\n        specularIntensity: 1\n      }\n    }\n  },\n  series: [\n    {\n      type: 'surface',\n      parametric: true,\n      wireframe: {\n        show: false\n      },\n      shading: 'realistic',\n      realisticMaterial: {\n        roughness: 0.3,\n        metalness: 0\n      },\n      parametricEquation: {\n        u: {\n          min: -13.2,\n          max: 13.2,\n          step: 0.2\n        },\n        v: {\n          min: -37.4,\n          max: 37.4,\n          step: 0.2\n        },\n        x: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return -u + (2 * r * cosh(aa * u) * sinh(aa * u)) / denom;\n        },\n        y: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return (\n            (2 *\n              w *\n              cosh(aa * u) *\n              (-(w * cos(v) * cos(w * v)) - sin(v) * sin(w * v))) /\n            denom\n          );\n        },\n        z: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return (\n            (2 *\n              w *\n              cosh(aa * u) *\n              (-(w * sin(v) * cos(w * v)) + cos(v) * sin(w * v))) /\n            denom\n          );\n        }\n      }\n    }\n  ]\n};\n","surface-golden-rose":"/*\ntitle: Golden Rose\ncategory: surface\ntitleCN: Golden Rose\n*/\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar sqrt = Math.sqrt;\nvar cosh = Math.cosh;\nvar sinh = Math.sinh;\nvar exp = Math.exp;\nvar PI = Math.PI;\nvar square = function (x) {\n  return x * x;\n};\nvar mod2 = function (a, b) {\n  var c = a % b;\n  return c > 0 ? c : c + b;\n};\nvar theta1 = -(20 / 9) * PI;\nvar theta2 = 15 * PI;\nfunction getParametricEquation(dx, dy) {\n  return {\n    u: {\n      min: 0,\n      max: 1,\n      step: 1 / 24\n    },\n    v: {\n      min: theta1,\n      max: theta2,\n      step: (theta2 - theta1) / 575\n    },\n    x: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * sin(theta) + dx;\n    },\n    y: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * cos(theta) + dy;\n    },\n    z: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return X * (x1 * cos(phi) - y1 * sin(phi));\n    }\n  };\n}\nfunction createSeries(dx, dy, color) {\n  return {\n    type: 'surface',\n    parametric: true,\n    shading: 'realistic',\n    silent: true,\n    wireframe: {\n      show: false\n    },\n    realisticMaterial: {\n      roughness: 0.3,\n      metalness: 1\n    },\n    itemStyle: {\n      color: color || [2, 1.5, 0.2]\n    },\n    parametricEquation: getParametricEquation(dx, dy)\n  };\n}\noption = {\n  toolbox: {\n    feature: {\n      saveAsImage: {\n        backgroundColor: '#111'\n      }\n    },\n    iconStyle: {\n      normal: {\n        borderColor: '#fff'\n      }\n    },\n    left: 0\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    show: false,\n    boxWidth: 200,\n    boxDepth: 200,\n    axisPointer: {\n      show: false\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#fff'\n      }\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 10,\n        intensity: 1\n      },\n      depthOfField: {\n        enable: true\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 1,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 1,\n        diffuseIntensity: 1,\n        specularIntensity: 1\n      }\n    },\n    viewControl: {\n      // projection: 'orthographic'\n    }\n  },\n  series: [\n    createSeries(1.5, 1.5),\n    createSeries(-1.5, -1.5),\n    createSeries(-1.5, 1.5),\n    createSeries(1.5, -1.5),\n    createSeries(0, 0)\n  ]\n};\n","scatter3D-dataset":"/*\ntitle: 3D Scatter with Dataset\ncategory: scatter3D\ntitleCN: 使用 dataset 为三维散点图设置数据\n*/\n$.get(\n  ROOT_PATH + '/data/asset/data/life-expectancy-table.json',\n  function (data) {\n    var symbolSize = 2.5;\n    option = {\n      grid3D: {},\n      xAxis3D: {\n        type: 'category'\n      },\n      yAxis3D: {},\n      zAxis3D: {},\n      dataset: {\n        dimensions: [\n          'Income',\n          'Life Expectancy',\n          'Population',\n          'Country',\n          { name: 'Year', type: 'ordinal' }\n        ],\n        source: data\n      },\n      series: [\n        {\n          type: 'scatter3D',\n          symbolSize: symbolSize,\n          encode: {\n            x: 'Country',\n            y: 'Life Expectancy',\n            z: 'Income',\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }\n      ]\n    };\n    myChart.setOption(option);\n  }\n);\n","surface-theme-roses":"/*\ntitle: Theme Roses\ncategory: surface\ntitleCN: Theme Roses\n*/\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar sqrt = Math.sqrt;\nvar cosh = Math.cosh;\nvar sinh = Math.sinh;\nvar exp = Math.exp;\nvar PI = Math.PI;\nvar square = function (x) {\n  return x * x;\n};\nvar mod2 = function (a, b) {\n  var c = a % b;\n  return c > 0 ? c : c + b;\n};\nvar theta1 = -(20 / 9) * PI;\nvar theta2 = 15 * PI;\nfunction getParametricEquation(dx, dy) {\n  return {\n    u: {\n      min: 0,\n      max: 1,\n      step: 1 / 24\n    },\n    v: {\n      min: theta1,\n      max: theta2,\n      step: (theta2 - theta1) / 575\n    },\n    x: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * sin(theta) + dx;\n    },\n    y: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return r * cos(theta) + dy;\n    },\n    z: function (x1, theta) {\n      var phi = (PI / 2) * exp(-theta / (8 * PI));\n      var y1 =\n        1.9565284531299512 *\n        square(x1) *\n        square(1.2768869870150188 * x1 - 1) *\n        sin(phi);\n      var X =\n        1 -\n        square(1.25 * square(1 - mod2(3.6 * theta, 2 * PI) / PI) - 0.25) / 2;\n      var r = X * (x1 * sin(phi) + y1 * cos(phi));\n      return X * (x1 * cos(phi) - y1 * sin(phi));\n    }\n  };\n}\nfunction createSeries(dx, dy, color) {\n  return {\n    type: 'surface',\n    parametric: true,\n    shading: 'realistic',\n    silent: true,\n    wireframe: {\n      show: false\n    },\n    realisticMaterial: {\n      roughness: 0.7,\n      metalness: 0,\n      textureTiling: [200, 20]\n    },\n    parametricEquation: getParametricEquation(dx, dy)\n  };\n}\noption = {\n  toolbox: {\n    feature: {\n      saveAsImage: {\n        backgroundColor: '#111'\n      }\n    },\n    iconStyle: {\n      normal: {\n        borderColor: '#fff'\n      }\n    },\n    left: 0\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    show: false,\n    boxWidth: 200,\n    boxDepth: 200,\n    axisPointer: {\n      show: false\n    },\n    axisLine: {\n      lineStyle: {\n        color: '#fff'\n      }\n    },\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 10,\n        intensity: 1\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 1,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n        exposure: 1,\n        diffuseIntensity: 1,\n        specularIntensity: 1\n      }\n    },\n    viewControl: {\n      // projection: 'orthographic'\n    }\n  },\n  series: [\n    createSeries(1.5, 1.5),\n    createSeries(-1.5, -1.5),\n    createSeries(-1.5, 1.5),\n    createSeries(1.5, -1.5),\n    createSeries(0, 0)\n  ]\n};\n","lines3d-airline-on-globe":"/*\ntitle: Airline on Globe\ncategory: lines3D\ntitleCN: Airline on Globe\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/flights.json', function (data) {\n  function getAirportCoord(idx) {\n    return [data.airports[idx][3], data.airports[idx][4]];\n  }\n  var routes = data.routes.map(function (airline) {\n    return [getAirportCoord(airline[1]), getAirportCoord(airline[2])];\n  });\n  myChart.setOption({\n    backgroundColor: '#000',\n    globe: {\n      baseTexture: ROOT_PATH + '/data-gl/asset/world.topo.bathy.200401.jpg',\n      heightTexture:\n        ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n      shading: 'lambert',\n      light: {\n        ambient: {\n          intensity: 0.4\n        },\n        main: {\n          intensity: 0.4\n        }\n      },\n      viewControl: {\n        autoRotate: false\n      }\n    },\n    series: {\n      type: 'lines3D',\n      coordinateSystem: 'globe',\n      blendMode: 'lighter',\n      lineStyle: {\n        width: 1,\n        color: 'rgb(50, 50, 150)',\n        opacity: 0.1\n      },\n      data: routes\n    }\n  });\n});\n","lines3d-flights":"/*\ntitle: Flights\ncategory: lines3D\ntitleCN: Flights\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/flights.json', function (data) {\n  var airports = data.airports.map(function (item) {\n    return {\n      coord: [item[3], item[4]]\n    };\n  });\n  function getAirportCoord(idx) {\n    return [data.airports[idx][3], data.airports[idx][4]];\n  }\n  // Route: [airlineIndex, sourceAirportIndex, destinationAirportIndex]\n  var routesGroupByAirline = {};\n  data.routes.forEach(function (route) {\n    var airline = data.airlines[route[0]];\n    var airlineName = airline[0];\n    if (!routesGroupByAirline[airlineName]) {\n      routesGroupByAirline[airlineName] = [];\n    }\n    routesGroupByAirline[airlineName].push(route);\n  });\n  var pointsData = [];\n  data.routes.forEach(function (airline) {\n    pointsData.push(getAirportCoord(airline[1]));\n    pointsData.push(getAirportCoord(airline[2]));\n  });\n  var series = data.airlines\n    .map(function (airline) {\n      var airlineName = airline[0];\n      var routes = routesGroupByAirline[airlineName];\n      if (!routes) {\n        return null;\n      }\n      return {\n        type: 'lines3D',\n        name: airlineName,\n        effect: {\n          show: true,\n          trailWidth: 2,\n          trailLength: 0.15,\n          trailOpacity: 1,\n          trailColor: 'rgb(30, 30, 60)'\n        },\n        lineStyle: {\n          width: 1,\n          color: 'rgb(50, 50, 150)',\n          // color: 'rgb(118, 233, 241)',\n          opacity: 0.1\n        },\n        blendMode: 'lighter',\n        data: routes.map(function (item) {\n          return [airports[item[1]].coord, airports[item[2]].coord];\n        })\n      };\n    })\n    .filter(function (series) {\n      return !!series;\n    });\n  series.push({\n    type: 'scatter3D',\n    coordinateSystem: 'globe',\n    blendMode: 'lighter',\n    symbolSize: 2,\n    itemStyle: {\n      color: 'rgb(50, 50, 150)',\n      opacity: 0.2\n    },\n    data: pointsData\n  });\n  myChart.setOption({\n    legend: {\n      selectedMode: 'single',\n      left: 'left',\n      data: Object.keys(routesGroupByAirline),\n      orient: 'vertical',\n      textStyle: {\n        color: '#fff'\n      }\n    },\n    globe: {\n      environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n      heightTexture:\n        ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n      displacementScale: 0.1,\n      displacementQuality: 'high',\n      baseColor: '#000',\n      shading: 'realistic',\n      realisticMaterial: {\n        roughness: 0.2,\n        metalness: 0\n      },\n      postEffect: {\n        enable: true,\n        depthOfField: {\n          enable: false,\n          focalDistance: 150\n        }\n      },\n      temporalSuperSampling: {\n        enable: true\n      },\n      light: {\n        ambient: {\n          intensity: 0\n        },\n        main: {\n          intensity: 0.1,\n          shadow: false\n        },\n        ambientCubemap: {\n          texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n          exposure: 1,\n          diffuseIntensity: 0.5,\n          specularIntensity: 2\n        }\n      },\n      viewControl: {\n        autoRotate: false\n      },\n      silent: true\n    },\n    series: series\n  });\n  window.addEventListener('keydown', function () {\n    series.forEach(function (series, idx) {\n      myChart.dispatchAction({\n        type: 'lines3DToggleEffect',\n        seriesIndex: idx\n      });\n    });\n  });\n});\n","image-to-bar3d":"/*\ntitle: Image to Bar3D\ncategory: bar3D\ntitleCN: Image to Bar3D\n*/\nvar img = new Image();\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nimg.onload = function () {\n  var width = (canvas.width = img.width / 2);\n  var height = (canvas.height = img.height / 2);\n  ctx.drawImage(img, 0, 0, width, height);\n  var imgData = ctx.getImageData(0, 0, width, height);\n  var data = [];\n  for (var i = 0; i < imgData.data.length / 4; i++) {\n    var r = imgData.data[i * 4];\n    var g = imgData.data[i * 4 + 1];\n    var b = imgData.data[i * 4 + 2];\n    var lum = 255 - (0.2125 * r + 0.7154 * g + 0.0721 * b);\n    lum = (lum - 125) / 20 + 50;\n    data.push([i % width, height - Math.floor(i / width), lum]);\n  }\n  myChart.setOption(\n    (option = {\n      tooltip: {},\n      backgroundColor: '#fff',\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        min: 0,\n        max: 100\n      },\n      grid3D: {\n        viewControl: {\n          alpha: 20,\n          beta: -30\n        },\n        postEffect: {\n          enable: true,\n          SSAO: {\n            enable: true\n          }\n        },\n        boxDepth: 120,\n        light: {\n          main: {\n            shadow: true,\n            intensity: 2\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n            exposure: 2,\n            diffuseIntensity: 0.2,\n            specularIntensity: 1\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar3D',\n          shading: 'realistic',\n          barSize: 1,\n          wireframe: {\n            show: false\n          },\n          itemStyle: {\n            color: function (params) {\n              var i = params.dataIndex;\n              var r = imgData.data[i * 4];\n              var g = imgData.data[i * 4 + 1];\n              var b = imgData.data[i * 4 + 2];\n              return 'rgb(' + [r, g, b].join(',') + ')';\n            }\n          },\n          data: data\n        }\n      ]\n    })\n  );\n};\nimg.src =\n  'data:image/jpeg;charset=utf-8;base64,';\n","sphere-parametric-surface":"/*\ntitle: Sphere Parametric Surface\ncategory: surface\ntitleCN: Sphere Parametric Surface\n*/\noption = {\n  tooltip: {},\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -1,\n    max: 1,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {},\n  yAxis3D: {},\n  zAxis3D: {},\n  grid3D: {},\n  series: [\n    {\n      type: 'surface',\n      parametric: true,\n      // shading: 'albedo',\n      parametricEquation: {\n        u: {\n          min: -Math.PI,\n          max: Math.PI,\n          step: Math.PI / 20\n        },\n        v: {\n          min: 0,\n          max: Math.PI,\n          step: Math.PI / 20\n        },\n        x: function (u, v) {\n          return Math.sin(v) * Math.sin(u);\n        },\n        y: function (u, v) {\n          return Math.sin(v) * Math.cos(u);\n        },\n        z: function (u, v) {\n          return Math.cos(v);\n        }\n      }\n    }\n  ]\n};\n","map3d-buildings":"/*\ntitle: Buildings\ncategory: map3D\ntitleCN: Buildings\n*/\n$.getJSON(\n  ROOT_PATH + '/data-gl/asset/data/buildings.json',\n  function (buildingsGeoJSON) {\n    echarts.registerMap('buildings', buildingsGeoJSON);\n    var regions = buildingsGeoJSON.features.map(function (feature) {\n      return {\n        name: feature.properties.name,\n        value: Math.random(),\n        height: feature.properties.height / 10\n      };\n    });\n    myChart.setOption({\n      visualMap: {\n        show: false,\n        min: 0.4,\n        max: 1,\n        inRange: {\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ]\n        }\n      },\n      series: [\n        {\n          type: 'map3D',\n          map: 'buildings',\n          shading: 'realistic',\n          environment: '#000',\n          realisticMaterial: {\n            roughness: 0.6,\n            textureTiling: 20\n          },\n          postEffect: {\n            enable: true,\n            SSAO: {\n              enable: true,\n              intensity: 1.3,\n              radius: 5\n            },\n            screenSpaceReflection: {\n              enable: false\n            },\n            depthOfField: {\n              enable: true,\n              blurRadius: 4,\n              focalDistance: 30\n            }\n          },\n          light: {\n            main: {\n              intensity: 3,\n              alpha: 40,\n              shadow: true,\n              shadowQuality: 'high'\n            },\n            ambient: {\n              intensity: 0\n            },\n            ambientCubemap: {\n              texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',\n              exposure: 1,\n              diffuseIntensity: 0.5,\n              specularIntensity: 1\n            }\n          },\n          groundPlane: {\n            show: false,\n            color: '#333'\n          },\n          viewControl: {\n            minBeta: -360,\n            maxBeta: 360,\n            alpha: 50,\n            center: [50, 0, -10],\n            distance: 30,\n            minDistance: 5,\n            panMouseButton: 'left',\n            rotateMouseButton: 'middle',\n            zoomSensitivity: 0.5\n          },\n          itemStyle: {\n            areaColor: '#666'\n            // borderColor: '#222',\n            // borderWidth: 1\n          },\n          label: {\n            color: 'white'\n          },\n          silent: true,\n          instancing: true,\n          boxWidth: 200,\n          boxHeight: 1,\n          data: regions\n        }\n      ]\n    });\n  }\n);\n","transparent-bar3d":"/*\ntitle: Transparent Bar3D\ncategory: bar3D\ntitleCN: Transparent Bar3D\n*/\n// prettier-ignore\nvar hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n    '7a', '8a', '9a', '10a', '11a',\n    '12p', '1p', '2p', '3p', '4p', '5p',\n    '6p', '7p', '8p', '9p', '10p', '11p'];\n// prettier-ignore\nvar days = ['Saturday', 'Friday', 'Thursday',\n    'Wednesday', 'Tuesday', 'Monday', 'Sunday'];\n// prettier-ignore\nvar data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];\noption = {\n  tooltip: {},\n  visualMap: {\n    max: 20,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {\n    type: 'category',\n    data: hours\n  },\n  yAxis3D: {\n    type: 'category',\n    data: days\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    boxWidth: 200,\n    boxDepth: 80,\n    light: {\n      main: {\n        intensity: 1.2\n      },\n      ambient: {\n        intensity: 0.3\n      }\n    }\n  },\n  series: [\n    {\n      type: 'bar3D',\n      data: data.map(function (item) {\n        return {\n          value: [item[1], item[0], item[2]]\n        };\n      }),\n      shading: 'color',\n      label: {\n        show: false,\n        fontSize: 16,\n        borderWidth: 1\n      },\n      itemStyle: {\n        opacity: 0.4\n      },\n      emphasis: {\n        label: {\n          fontSize: 20,\n          color: '#900'\n        },\n        itemStyle: {\n          color: '#900'\n        }\n      }\n    }\n  ]\n};\n","surface-wave":"/*\ntitle: Surface Wave\ncategory: surface\ntitleCN: Surface Wave\n*/\noption = {\n  tooltip: {},\n  backgroundColor: '#fff',\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -1,\n    max: 1,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value',\n    max: 1,\n    splitNumber: 2\n  },\n  grid3D: {\n    viewControl: {\n      // projection: 'orthographic'\n    },\n    boxHeight: 40\n  },\n  series: [\n    {\n      type: 'surface',\n      wireframe: {\n        show: false\n      },\n      shading: 'color',\n      equation: {\n        x: {\n          step: 0.05,\n          min: -3,\n          max: 3\n        },\n        y: {\n          step: 0.05,\n          min: -3,\n          max: 3\n        },\n        z: function (x, y) {\n          return (Math.sin(x * x + y * y) * x) / 3.14;\n        }\n      }\n    }\n  ]\n};\n","simple-surface":"/*\ntitle: Simple Surface\ncategory: surface\ntitleCN: Simple Surface\n*/\noption = {\n  tooltip: {},\n  backgroundColor: '#fff',\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -1,\n    max: 1,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {\n    type: 'value'\n  },\n  yAxis3D: {\n    type: 'value'\n  },\n  zAxis3D: {\n    type: 'value'\n  },\n  grid3D: {\n    viewControl: {\n      // projection: 'orthographic'\n    }\n  },\n  series: [\n    {\n      type: 'surface',\n      wireframe: {\n        // show: false\n      },\n      equation: {\n        x: {\n          step: 0.05\n        },\n        y: {\n          step: 0.05\n        },\n        z: function (x, y) {\n          if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {\n            return '-';\n          }\n          return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);\n        }\n      }\n    }\n  ]\n};\n","stacked-bar3d":"/*\ntitle: Stacked Bar3D\ncategory: bar3D\ntitleCN: Stacked Bar3D\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  function generateData() {\n    var data = [];\n    var noise = new SimplexNoise(Math.random);\n    for (var i = 0; i <= 10; i++) {\n      for (var j = 0; j <= 10; j++) {\n        var value = noise.noise2D(i / 5, j / 5);\n        data.push([i, j, value * 2 + 4]);\n      }\n    }\n    return data;\n  }\n  var series = [];\n  for (var i = 0; i < 10; i++) {\n    series.push({\n      type: 'bar3D',\n      data: generateData(),\n      stack: 'stack',\n      shading: 'lambert',\n      emphasis: {\n        label: {\n          show: false\n        }\n      }\n    });\n  }\n  myChart.setOption({\n    xAxis3D: {\n      type: 'value'\n    },\n    yAxis3D: {\n      type: 'value'\n    },\n    zAxis3D: {\n      type: 'value'\n    },\n    grid3D: {\n      viewControl: {\n        // autoRotate: true\n      },\n      light: {\n        main: {\n          shadow: true,\n          quality: 'ultra',\n          intensity: 1.5\n        }\n      }\n    },\n    series: series\n  });\n});\n","scatter3d-orthographic":"/*\ntitle: 三维散点图正交投影\ncategory: scatter3D\ntheme: dark\ntitleCN: 三维散点图正交投影\n*/\n$.getScript(\n  'https://jsd.cdn.zzko.cn/npm/simplex-noise@2.4.0/simplex-noise.js'\n).done(function () {\n  var noise = new SimplexNoise(Math.random);\n  function generateData(theta, min, max) {\n    var data = [];\n    for (var i = 0; i <= 40; i++) {\n      for (var j = 0; j <= 40; j++) {\n        for (var k = 0; k <= 40; k++) {\n          var value = noise.noise3D(i / 20, j / 20, k / 20);\n          valMax = Math.max(valMax, value);\n          valMin = Math.min(valMin, value);\n          data.push([i, j, k, value * 2 + 4]);\n        }\n      }\n    }\n    return data;\n  }\n  var valMin = Infinity;\n  var valMax = -Infinity;\n  var data = generateData(2, -5, 5);\n  console.log(valMin, valMax);\n  myChart.setOption(\n    (option = {\n      visualMap: {\n        show: false,\n        min: 2,\n        max: 6,\n        inRange: {\n          symbolSize: [0.5, 15],\n          color: [\n            '#313695',\n            '#4575b4',\n            '#74add1',\n            '#abd9e9',\n            '#e0f3f8',\n            '#ffffbf',\n            '#fee090',\n            '#fdae61',\n            '#f46d43',\n            '#d73027',\n            '#a50026'\n          ],\n          colorAlpha: [0.2, 1]\n        }\n      },\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value'\n      },\n      grid3D: {\n        axisLine: {\n          lineStyle: { color: '#fff' }\n        },\n        axisPointer: {\n          lineStyle: { color: '#fff' }\n        },\n        viewControl: {\n          projection: 'orthographic'\n        }\n      },\n      series: [\n        {\n          type: 'scatter3D',\n          data: data\n        }\n      ]\n    })\n  );\n});\n","scatter3d-globe-population":"/*\ntitle: Scatter3D - Globe Population\ncategory: scatter3D\ntitleCN: Scatter3D - Globe Population\n*/\n$.getJSON(ROOT_PATH + '/data-gl/asset/data/population.json', function (data) {\n  data = data\n    .filter(function (dataItem) {\n      return dataItem[2] > 0;\n    })\n    .map(function (dataItem) {\n      return [dataItem[0], dataItem[1], Math.sqrt(dataItem[2])];\n    });\n  myChart.setOption({\n    visualMap: {\n      show: false,\n      min: 0,\n      max: 60,\n      inRange: {\n        symbolSize: [1.0, 10.0]\n      }\n    },\n    globe: {\n      environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n      heightTexture:\n        ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n      displacementScale: 0.05,\n      displacementQuality: 'high',\n      globeOuterRadius: 100,\n      baseColor: '#000',\n      shading: 'realistic',\n      realisticMaterial: {\n        roughness: 0.2,\n        metalness: 0\n      },\n      postEffect: {\n        enable: true,\n        depthOfField: {\n          focalRange: 15,\n          enable: true,\n          focalDistance: 100\n        }\n      },\n      temporalSuperSampling: {\n        enable: true\n      },\n      light: {\n        ambient: {\n          intensity: 0\n        },\n        main: {\n          intensity: 0.1,\n          shadow: false\n        },\n        ambientCubemap: {\n          texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n          exposure: 1,\n          diffuseIntensity: 0.5,\n          specularIntensity: 2\n        }\n      },\n      viewControl: {\n        autoRotate: false,\n        beta: 180,\n        alpha: 20,\n        distance: 100\n      }\n    },\n    series: {\n      type: 'scatter3D',\n      coordinateSystem: 'globe',\n      blendMode: 'lighter',\n      symbolSize: 2,\n      itemStyle: {\n        color: 'rgb(50, 50, 150)',\n        opacity: 1\n      },\n      data: data\n    }\n  });\n});\n","image-surface-sushuang":"/*\ntitle: Image Surface Sushuang\ncategory: surface\ntitleCN: Image Surface Sushuang\n*/\nvar img = new Image();\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nimg.onload = function () {\n  var width = (canvas.width = img.width);\n  var height = (canvas.height = img.height);\n  ctx.drawImage(img, 0, 0, width, height);\n  var imgData = ctx.getImageData(0, 0, width, height);\n  var data = [];\n  for (var i = 0; i < imgData.data.length / 4; i++) {\n    var r = imgData.data[i * 4];\n    var g = imgData.data[i * 4 + 1];\n    var b = imgData.data[i * 4 + 2];\n    var lum = 255 - (0.2125 * r + 0.7154 * g + 0.0721 * b);\n    lum = (lum - 125) / 10 + 50;\n    data.push([i % width, height - Math.floor(i / width), lum]);\n  }\n  myChart.setOption(\n    (option = {\n      tooltip: {},\n      backgroundColor: '#fff',\n      xAxis3D: {\n        type: 'value'\n      },\n      yAxis3D: {\n        type: 'value'\n      },\n      zAxis3D: {\n        type: 'value',\n        min: 0,\n        max: 100\n      },\n      grid3D: {\n        axisPointer: {\n          show: false\n        },\n        viewControl: {\n          distance: 100\n        },\n        postEffect: {\n          enable: true\n        },\n        light: {\n          main: {\n            shadow: true,\n            intensity: 2\n          },\n          ambientCubemap: {\n            texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n            exposure: 2,\n            diffuseIntensity: 0.2,\n            specularIntensity: 1\n          }\n        }\n      },\n      series: [\n        {\n          type: 'surface',\n          silent: true,\n          wireframe: {\n            show: false\n          },\n          itemStyle: {\n            color: function (params) {\n              var i = params.dataIndex;\n              var r = imgData.data[i * 4];\n              var g = imgData.data[i * 4 + 1];\n              var b = imgData.data[i * 4 + 2];\n              return 'rgb(' + [r, g, b].join(',') + ')';\n            }\n          },\n          data: data\n        }\n      ]\n    })\n  );\n};\nimg.src =\n  'data:image/jpeg;charset=utf-8;base64,';\n","scattergl-weibo":"/*\ntitle: 微博签到数据点亮中国\ncategory: scatterGL\ntheme: dark\ntitleCN: 微博签到数据点亮中国\n*/\n$.getJSON(ROOT_PATH + '/data/asset/data/weibo.json', function (weiboData) {\n  weiboData = weiboData.map(function (serieData, idx) {\n    var px = serieData[0] / 1000;\n    var py = serieData[1] / 1000;\n    var res = [[px, py]];\n    for (var i = 2; i < serieData.length; i += 2) {\n      var dx = serieData[i] / 1000;\n      var dy = serieData[i + 1] / 1000;\n      var x = px + dx;\n      var y = py + dy;\n      res.push([x.toFixed(2), y.toFixed(2), 1]);\n      px = x;\n      py = y;\n    }\n    return res;\n  });\n  myChart.setOption(\n    (option = {\n      title: {\n        text: '微博签到数据点亮中国',\n        subtext: 'From ThinkGIS',\n        sublink: 'http://www.thinkgis.cn/public/sina',\n        left: 'center',\n        top: 'top',\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      tooltip: {},\n      legend: {\n        left: 'left',\n        data: ['强', '中', '弱'],\n        textStyle: {\n          color: '#ccc'\n        }\n      },\n      geo: {\n        map: 'china',\n        roam: true,\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#111'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        }\n      },\n      series: [\n        {\n          name: '弱',\n          type: 'scatterGL',\n          coordinateSystem: 'geo',\n          symbolSize: 1,\n          itemStyle: {\n            shadowBlur: 2,\n            shadowColor: 'rgba(37, 140, 249, 0.8)',\n            color: 'rgba(37, 140, 249, 0.8)'\n          },\n          data: weiboData[0]\n        },\n        {\n          name: '中',\n          type: 'scatterGL',\n          coordinateSystem: 'geo',\n          symbolSize: 1,\n          itemStyle: {\n            shadowBlur: 2,\n            shadowColor: 'rgba(14, 241, 242, 0.8)',\n            color: 'rgba(14, 241, 242, 0.8)'\n          },\n          data: weiboData[1]\n        },\n        {\n          name: '强',\n          type: 'scatterGL',\n          coordinateSystem: 'geo',\n          symbolSize: 1,\n          itemStyle: {\n            shadowBlur: 2,\n            shadowColor: 'rgba(255, 255, 255, 0.8)',\n            color: 'rgba(255, 255, 255, 0.8)'\n          },\n          data: weiboData[2]\n        }\n      ]\n    })\n  );\n});\n","surface-mollusc-shell":"/*\ntitle: Mollusc Shell\ncategory: surface\ntitleCN: Mollusc Shell\n*/\noption = {\n  tooltip: {},\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -5,\n    max: 0,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {},\n  yAxis3D: {},\n  zAxis3D: {},\n  grid3D: {\n    show: true,\n    postEffect: {\n      enable: true\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 3,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n        exposure: 2,\n        diffuseIntensity: 1,\n        specularIntensity: 1\n      }\n    }\n  },\n  series: [\n    {\n      type: 'surface',\n      parametric: true,\n      wireframe: {\n        show: false\n      },\n      shading: 'realistic',\n      realisticMaterial: {\n        roughness: 0.4,\n        metalness: 0\n      },\n      parametricEquation: {\n        u: {\n          min: -Math.PI,\n          max: Math.PI,\n          step: Math.PI / 40\n        },\n        v: {\n          min: -15,\n          max: 6,\n          step: 0.21\n        },\n        x: function (u, v) {\n          return Math.pow(1.16, v) * Math.cos(v) * (1 + Math.cos(u));\n        },\n        y: function (u, v) {\n          return -Math.pow(1.16, v) * Math.sin(v) * (1 + Math.cos(u));\n        },\n        z: function (u, v) {\n          return -2 * Math.pow(1.16, v) * (1 + Math.sin(u));\n        }\n      }\n    }\n  ]\n};\n","scatterGL-gps":"/*\ntitle: 10 million Bulk GPS points\ntitleCN: 1 千万 GPS 点可视化\ncategory: scatterGL\n*/\nvar dataCount = 0;\nvar CHUNK_COUNT = 230;\n// https://blog.openstreetmap.org/2012/04/01/bulk-gps-point-data/\nfunction fetchData(idx) {\n  if (idx >= CHUNK_COUNT) {\n    return;\n  }\n  var dataURL = ROOT_PATH + '/data/asset/data/gps/gps_' + idx + '.bin';\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', dataURL, true);\n  xhr.responseType = 'arraybuffer';\n  xhr.onload = function (e) {\n    var rawData = new Int32Array(this.response);\n    var data = new Float32Array(rawData.length);\n    var addedDataCount = rawData.length / 2;\n    for (var i = 0; i < rawData.length; i += 2) {\n      data[i] = rawData[i + 1] / 1e7;\n      data[i + 1] = rawData[i] / 1e7;\n    }\n    myChart.appendData({\n      seriesIndex: 0,\n      data: data\n    });\n    fetchData(idx + 1);\n  };\n  xhr.send();\n}\noption = {\n  backgroundColor: '#000',\n  title: {\n    text: '10000000 GPS Points',\n    left: 'center',\n    textStyle: {\n      color: '#fff'\n    }\n  },\n  geo: {\n    map: 'world',\n    roam: true,\n    label: {\n      emphasis: {\n        show: false\n      }\n    },\n    silent: true,\n    itemStyle: {\n      normal: {\n        areaColor: '#323c48',\n        borderColor: '#111'\n      },\n      emphasis: {\n        areaColor: '#2a333d'\n      }\n    }\n  },\n  series: [\n    {\n      name: '弱',\n      type: 'scatterGL',\n      progressive: 1e6,\n      coordinateSystem: 'geo',\n      symbolSize: 1,\n      zoomScale: 0.002,\n      blendMode: 'lighter',\n      large: true,\n      itemStyle: {\n        color: 'rgb(20, 15, 2)'\n      },\n      postEffect: {\n        enable: true\n      },\n      silent: true,\n      dimensions: ['lng', 'lat'],\n      data: new Float32Array()\n    }\n  ]\n};\nfetchData(0);\n","metal-surface":"/*\ntitle: Metal Surface\ncategory: surface\ntitleCN: Metal Surface\n*/\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar sqrt = Math.sqrt;\nvar cosh = Math.cosh;\nvar sinh = Math.sinh;\nvar PI = Math.PI;\nvar aa = 0.4;\nvar r = 1 - aa * aa;\nvar w = sqrt(r);\noption = {\n  tooltip: {},\n  visualMap: {\n    show: false,\n    dimension: 2,\n    min: -5,\n    max: 5,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  xAxis3D: {},\n  yAxis3D: {},\n  zAxis3D: {},\n  grid3D: {\n    show: false,\n    postEffect: {\n      enable: true,\n      SSAO: {\n        enable: true,\n        radius: 4,\n        quality: 'high',\n        intensity: 1.5\n      }\n    },\n    temporalSuperSampling: {\n      enable: true\n    },\n    light: {\n      main: {\n        intensity: 2,\n        shadow: true\n      },\n      ambient: {\n        intensity: 0\n      },\n      ambientCubemap: {\n        texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',\n        exposure: 2,\n        diffuseIntensity: 0.2,\n        specularIntensity: 3\n      }\n    }\n  },\n  series: [\n    {\n      type: 'surface',\n      parametric: true,\n      silent: true,\n      wireframe: {\n        show: false\n      },\n      shading: 'realistic',\n      realisticMaterial: {\n        roughness: 0.2,\n        metalness: 1\n      },\n      parametricEquation: {\n        u: {\n          min: -13.2,\n          max: 13.2,\n          step: 0.2\n        },\n        v: {\n          min: -37.4,\n          max: 37.4,\n          step: 0.2\n        },\n        x: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return -u + (2 * r * cosh(aa * u) * sinh(aa * u)) / denom;\n        },\n        y: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return (\n            (2 *\n              w *\n              cosh(aa * u) *\n              (-(w * cos(v) * cos(w * v)) - sin(v) * sin(w * v))) /\n            denom\n          );\n        },\n        z: function (u, v) {\n          var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2));\n          return (\n            (2 *\n              w *\n              cosh(aa * u) *\n              (-(w * sin(v) * cos(w * v)) + cos(v) * sin(w * v))) /\n            denom\n          );\n        }\n      }\n    }\n  ]\n};\n"}